<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阿掖山：一个博客</title>
    <description>阿掖山：一个博客</description>
    <link>http://localhost:4000/blog/</link>
    <atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Jun 2019 03:18:06 +0000</pubDate>
    <lastBuildDate>Thu, 20 Jun 2019 03:18:06 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>翻译：为什么说物理不是一门学科</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者：菲利普·鲍尔 (Philip Ball)&lt;/p&gt;

  &lt;p&gt;来源：《Nautilus》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大约是上学期期中的时候，我们老板给我们分享了这篇文章的链接。当时觉得不错，但是没有读完。如今开始写博客了，又想起了这篇文章。结果翻译的过程中渐渐发现，此文篇幅过长，和学术沾边的英语直译过来也不适合阅读，并不适合作为一篇博文，更不用说手机端的微信公众号了。但我还是坚持把这篇文章译完了，主要原因，我这个专业有时需要些这样的鸡汤以自勉。至于读者们，我只能说句抱歉。&lt;/p&gt;

  &lt;p&gt;以及，这篇翻译已经过原文作者的许可。数次联系最初发表的网站，均无人回复。在此附上原文链接：&lt;a href=&quot;http://nautil.us/issue/35/boundaries/why-physics-is-not-a-discipline&quot;&gt;http://nautil.us/issue/35/boundaries/why-physics-is-not-a-discipline&lt;/a&gt;。对原文的转载和改编，请联系原作者；对这篇翻译的转载、修改和改编，请联系我本人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你听过那个关于生物学家、物理学家和数学家的段子吗？他们坐在一个咖啡馆里看着人们从街对面的一个房子里进进出出。两个人进去了，然后一会三个人出来了。物理学家说：“测量不准确。”生物学家说：“他们繁殖了。”数学家说：“若现在恰有一人进入此屋，则屋子再次为空。”&lt;/p&gt;

&lt;p&gt;好笑吧，不好笑？这种笑话你能找到很多——很多都提到了球形的奶牛——但是我还从来没找到过能让我笑得出来的。然而，这不是这些段子的目的。他们被用来向我们展示，这些学科用非常不同，甚至可能互不相容的方式来看待这个世界。&lt;/p&gt;

&lt;p&gt;这么说有些道理。比如说，很多物理学家都会讲段子，编排生物学家在他们领域内的努力是多么平庸，把他们看成是不着边际和理解力成问题的人。并不只有物理学家会被认为事情做得不对，生物学家经常认为（完善但是范围被严格限定的生物物理可能除外）生物学里就没有物理的位置。&lt;/p&gt;

&lt;p&gt;但是这种反对（和段子）是把学术的标签和科学的标签混为一谈了。物理，被恰当理解的情况下，并不是一个在中学和大学讲授的学科，而是关于世界上的种种过程如何发生的一种特定的理解方式。当亚里士多德在公元前4世纪写下他的《物理》的时候，他描述的并非是学术界的一个领域，而是哲学上的一种模式：一种思考自然的方式。你可能会觉得那只是一种古代的用法，但不对。当今天的物理学家谈（他们也经常谈）一个问题的“物理”的时候，他们的意思很接近亚里士多德：既不是纯粹的数学形式也不只是陈述，而是一种从基本原理出发，推导出过程的方法。&lt;/p&gt;

&lt;p&gt;这就是为什么，存在着生物的物理，就像化学的、地质学和社会学的物理存在一样。但在职业的意义上，发现这些物理的并不一定是“物理学家”。&lt;/p&gt;

&lt;p&gt;在20世纪中叶，物理和生物学之间的界限不如今天严格分明。20世纪分子生物学的几位先驱，包括马克思·德尔布吕克 (Max Delbrück)，塞默·本泽 (Seymour Benzer) 和弗朗西斯·克里克 (Francis Crick)，最初都被训练为物理学家。而且从詹姆斯·沃森 (James Watson) 和弗朗西斯·克里克1953年对DNA中基因编码的发现中找到证据的，基因和进化的“信息论”视角的开创，通常被归功于物理学奖厄温·薛定谔 (Erwin Schrödinger) 1944年的《什么是生命？》一书。（然而，他的一些观点被生物学家赫尔曼·穆勒预见到了。）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;刚才这段里面薛定谔的这句太绕了，我把原文放出来吧：And the beginnings of the “information” perspective on genes and evolution that found substance in James Watson and Francis Crick’s 1953 discovery of genetic coding in DNA is usually attributed to physicist Erwin Schrödinger’s 1944 book What Is Life?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;来一个张佳玮风格的翻译：而且，基因和进化的“信息论”视角——从詹姆斯·沃森 (James Watson) 和弗朗西斯·克里克1953年对DNA中基因编码的发现中找到了证据——的开创，通常被归功于物理学奖厄温·薛定谔 (Erwin Schrödinger) 1944年的《什么是生命？》一书。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;20世纪中期，物理与生物的合流受到了很多优秀生物学家的欢迎，包括康莱德·豪·瓦丁顿 (Conrad Hal Waddington)、哈代 (J. B. S. Haldane) 和约瑟夫·尼德海姆 (Joseph Needham)，也就是成立了剑桥大学理论生物学俱乐部的人。而且对于DNA的“数字编码”的理解和应用数学家诺伯特·维尔纳 (Norbert Wiener) 对控制论框架的勾勒大致同时，后者致力于解释，从机器到细胞这样的复杂系统，如何被反馈过程组成的网络所调控。在1955年，物理学家乔治·伽莫夫 (George Gamow) 在《科学美国人》上发表了一篇有先见之明的文章，名为“活体细胞中的信息传递”，而且控制论赋予了生物学家雅各斯·蒙诺德 (Jacques Monod) 和弗兰西奥斯·雅各布 (François Jacob) 一种语言，来明确描述他们在1960年代提出的基因调控网络的初步理论。&lt;/p&gt;

&lt;p&gt;但是随后，这一“生物之理”项目停滞了。尽管有物理学家转向研究生物相关的问题，但是他们的努力和分子和细胞生物学中，主流的基因组数据收集，以及基因和生化机制的细致分析之间，仍存在着将之区分开来的空白。究竟发生了什么？&lt;/p&gt;

&lt;p&gt;这一分离中的一些关键原因被恩斯特·迈耶 (Ernst Mayr) 总结在了他2004年的著作《什么让生物学独一无二》之中。迈耶是当代最著名的演化生物学家之一，而且单是这一标题本身就反映出了长久以来生命科学界持有的例外论观点。在迈耶看来，对于物理能提供的那种一般性理论来说，生物学太过混乱和复杂——魔鬼总在细节处。&lt;/p&gt;

&lt;h2 id=&quot;一个领域内的科学想法可能最终关联另一领域&quot;&gt;一个领域内的科学想法可能最终关联另一领域&lt;/h2&gt;

&lt;p&gt;迈耶可能做出了任何生物学家所能做出的最精致的努力，来给他们的学科周围画上一圈清晰的边界，很聪明地将其和科学的其他领域区隔开来。通过这么做，他对这种努力的愚蠢进行了了最清晰的展示。&lt;/p&gt;

&lt;p&gt;他找出了将物理区分于生物的四大基本特征。它们分别是本质主义（将世界划分为精细刻画而且不变的诸范畴，比如电子和质子）、决定论（本质主义几乎必然会导致这一点）、还原论（通过将一个系统约化为它的各个组成部分来理解整个系统）、定律的普适性，而生物学中的规律是由偶然、随机性和历史不确定性所决定的。任何物理学家都会告诉你这种对物理学特征的刻画是彻底错误的，正像对于量子力学、混沌、复杂性的熟悉所揭示的那样。&lt;/p&gt;

&lt;p&gt;但是迈耶的论点变得更有趣——如果不是更有理了——当他说真正让生物学独一无二的，是它与目的有关：通过盲目的突变和进化过程中的选择构造出来的巧妙设计。在随机游走过程中互相碰撞的粒子们可什么都不必做。但是基因网络和蛋白质分子以及细胞的复杂架构是通过适者生存的残酷性来塑造的：它们有一个目标。而物理并不研究目的，对吧？正如纽约城市大学的从演化生物学家改行的哲学家马斯莫·皮格留奇 (Massimo Pigliucci) 最近表示的那样：“去问一个电子、一个分子、一个行星或山脉的意义或者目标是什么，是没有意义的。”&lt;/p&gt;

&lt;p&gt;目的或者说目的论是生物学中的困难词汇：它们很容易让人以为，进化的“盲人制表师”存在一种确定的目标，导致这些词被神创论者滥用。但是在生物学中讨论功能的时候是没办法摆脱这种内疚的：他的组成成分和结构在生物体的生存和基因的传播过程中的确发挥着作用。&lt;/p&gt;

&lt;p&gt;问题是，物理学家也没因为这个词而退却。当诺伯特·维尔纳把他1943年的论文命名为“行为、目的和目的论”的时候，他是故意挑衅的。两年后，维尔纳和匈牙利数学物理家约翰·冯·诺伊曼 (John von Neumann) 成立的目的论学会，宣布其任务是理解“目的是如何在人类和动物的行为中实现的”。冯·诺伊曼对于作为一种计算过程的繁殖——进化中的“生物功能”中最重要的一项——方面长期不渝的兴趣，奠定了元胞自动机的理论基础，元胞自动机如今广泛用于研究复杂的适应性过程，包括达尔文进化论（甚至理查德·道金斯 (Richard Dawkins) 都用过它们）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;诺伊曼一句的原文：Von Neumann’s abiding interest in replication—an essential ingredient for evolving “biological function”—as a computational process laid the foundations of the theory of cellular automata…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;达尔文主义中对环境的适应产生了显式的目的。那么不引入任何关于适应的“物理”，通过达尔文的随机突变和自然选择，我们不是很好地理解了这种目的吗？&lt;/p&gt;

&lt;p&gt;其实，没有。一方面，繁殖的生物体间随机可遗传的突变，以及来自环境的选择压力，这两者一定会导致适应性、多样性和创新性，这一论断并不显然。这一结果如何依赖于像是繁殖速率、复制过程中的保真度、系统中的随机噪声水平、选择压力的强度、遗传信息及其决定的特性（基因型和表现型），以及等等等等的因素？演化生物学家有用于探究这些事情的数学模型，但是没有一个通用的框架将之联系起来，计算并没有办法告诉你太多。&lt;/p&gt;

&lt;p&gt;这个通用的框架就是进化的物理。它可能被映射为，比如说存在阈值的某些变量，一旦超过这个阈值，一种在性质上不同的全局行为就会显现出来：物理学家管这个叫相图。理论化学家彼得·舒斯特 (Peter Schuster) 和他的同事已经在基因复制的错误率当中发现了这样一个阈值，只要低于这个值，基因组复制过程中保留的信息就将保持稳定。换句话说，超过这个错误率，就不存在像这样可识别的物种：他们的基因身份“融化”了。舒斯特的同事，诺奖得主化学家曼弗雷德·艾根 (Manfred Eigen)，表示这种切换是一种相变现象，和物理学家传统上研究的融化完全相似。&lt;/p&gt;

&lt;p&gt;与此同时，演化生物学家安德里亚斯·瓦格纳 (Andreas Wagner) 用计算机模型说明了达尔文进化论有能力产生性质上全新的形式和结构，而不只是在那些自然选择无法自动推论得到的论题上进行微小的修正。实际上，这依赖于描述功能（比如一种蛋白质的化学效用）如何依赖于编码功能的信息（比如分子链上氨基酸的序列）的概率的组合空间有一种特殊的“形状”。此处又是“物理”为进化多样性提供了基础。&lt;/p&gt;

&lt;p&gt;而且麻省理工学院的物理学家杰瑞米·英格兰 (Jeremy England) 还表明，适应性本身并不一定要依赖于达尔文的自然选择和基因的遗传，而是有可能根植于更深层次的，复杂系统中的热力学。关于适合程度 (fitness) 和适应性 (adaptation) 概念一直以来都十分困难，无法深究——很容易听起来就像是循环推理。但是英格兰说它们可以看作更基本的形式，也就是一个特定的系统，在面对恒定的能量流动时，通过抑制能量的波动和耗散，从而维持自身的能力：也可以说，就是“保持冷静，继续前进”(keep calm and carry on) 的能力。&lt;/p&gt;

&lt;p&gt;“我们的初始假设是基于物理的，而这些假设推导出了一个非平衡态演化的一般特征的命题，在这个命题之下，达尔文的学说变成了系统中存在自我增殖之物的一种特殊情况”，英格兰说，“（适应性的）概念变成了存在热涨落的物体自发地被塑造成善于从环境中接受外场做功的状态。”他表示，其中振奋人心之处在于，“当我们从物理方面考虑某些看起来些具有“适应”性的结构的起源的时候，这些结构不必拥有生物意义上的父母。”已经有些研究人员表示英格兰的观点为达尔文的学说提供了物理基础。&lt;/p&gt;

&lt;p&gt;注意，我们其实没法预言这些生物学现象的物理将会从哪里冒出来——来自于化学家和生物学家的可能性和来自“物理学家”的可能性差不多。从学科的意义上讲，把这些基础的观点和理论叫做一个问题的物理，完全不是物理沙文主义的意思。我们只是需要将这个词从教条的定义，以及伴随这种定义的学界鄙视链之战中解救出来。&lt;/p&gt;

&lt;p&gt;在物理学内部，你可能很熟悉这种对生物学中的概念的入侵，这只不过是一个领域内发展出的科学观点关联到另一领域的又一个例子。&lt;/p&gt;

&lt;p&gt;但是问题其实还要更深刻一些，而且将其称作不同学科之间的跨界（或者说越界）并没有刻画出问题的全貌。我们需要超越像迈耶那样划定并维护学科边界的努力。&lt;/p&gt;

&lt;p&gt;物理学家们对同行们洞察“问题的物理”能力的吹捧可能听起来有些古怪。除了思考“问题的物理”，物理学家还有别的可做吗？这其中包含了一个误解。此处描述的是，放过数学描述和各种相互作用的细节，直接去处理其中隐含的概念——通常能够用非数学的，乃至口头语言进行简要描述的一般性概念。在这种意义上所说的物理并不是一套固定的解题流程，也不必落实在某一类具体的题目之上。这是一种思考世界的方式：一套在因果之间建立联系的构想。&lt;/p&gt;

&lt;h2 id=&quot;我们还不太知道生物中的物理应当包含什么但没有它我们理解不了生命&quot;&gt;我们还不太知道生物中的物理应当包含什么，但没有它我们理解不了生命&lt;/h2&gt;

&lt;p&gt;这种思考可能来自于任何一位科学家，不论他/她的学术目标是什么。物理是雅各布和蒙诺德在观察反馈过程时所展示的，基因调控的关键，基因调控也因之和控制论之间建立了联系。物理是发展生物学家汉斯·曼因哈特 (Hans Meinhardt) 在1970年代的成果，那时他和同事阿尔弗雷德·吉雷尔 (Alfred Gierer) 解锁了图灵结构的物理。图灵结构是一种描述化学扩散过程的数学模型中自发产生的图案，由数学家阿兰·图灵 (Alan Turing) 在1952年提出，用于解释胚胎中形态 (form) 和秩序 (order) 的形成。曼因哈特和吉雷尔识别出了隐藏在图灵的数学之下的物理：一种自我生成的化学试剂（“启动子”）和一种抑制其行为的成分之间的相互作用。&lt;/p&gt;

&lt;p&gt;一旦我们放弃基于院系的对于物理的定义，其他学科周围的高墙也就不再是铁板一块了，从而会产生积极的结果。迈耶认为的生物收到目标的激励而非生物不然的想法，与萌发于一切始于DNA这一观点的对生物信息的粗浅解释密切相关。正如迈耶所说：“生物世界中的单一现象或过程，没有一个不是由基因组中的基因程序所控制的。”&lt;/p&gt;

&lt;p&gt;这种现在被称为“DNA沙文主义”的观点，会导致迈耶错误地归咎于物理的那种还原主义，这也正是生物的物理所反对的。即便我们承认（我们也必须承认） DNA 和基因的确在生物演化和生存的机制的种种细节中占据中心地位，我们仍需要一种更宽广的视野，维持生物运转的细心并不止来自于 DNA 数据库。此处的一个关键问题在于因果性：信息朝着什么方向流动？现在将这些因果性问题定量化正变得可能，而且这揭示出了那种普适的自下而上的视角的不足。&lt;/p&gt;

&lt;p&gt;威斯康星麦迪逊大学的神经科学家吉欧里奥·托诺尼 (Giulio Tononi) 和他的同事们用一种各部分之间相互作用的的复杂系统构建了一个通用模型，每一部分可以是神经元或者基因，他们发现有时系统的行为并不由自下而上的方式决定，而是由各部分之间更高层次的组织。&lt;/p&gt;

&lt;p&gt;这一图景也出现在了萨拉·沃克尔 (Sara Walker)、保罗·戴维斯 (Paul Davies) 以及亚利桑那州立大学的同事们对酵母基因网络的分析之中。这项研究表明，这一案例中确实涉及到了“自上而下”的因果性。戴维斯和同事们相信自上而下的因果性可能是生命物理中的一个广泛特征，可能在进化中的一些重大进步中发挥了关键性作用，比如说基因编码的出现、有复杂细胞器的细胞（真核生物）的出现、多细胞有机体的演化，甚至是生命的出现本身。他们说，在这些关键节点上，信息可能改变了流动的方向，使得高层次的组织影响和改变了低层次上的组织，而非一切都由基因水平上的突变来“驱动”。&lt;/p&gt;

&lt;p&gt;这一工作，和瓦格纳、舒斯特以及艾根的成果共同揭示的一件事是，DNA 和基因网络关联于生物系统的维持和演化的方式可能只有在我们更好地理解了信息本身的物理之后才能彻底理解。&lt;/p&gt;

&lt;p&gt;需要考虑到的一点在于这样一种发现：生物系统往往运行在物理学家称为临界相变或者说临界点附近：一种在两种组织模式之间切换的边缘疯狂试探的状态，其中一种模式有序，另一种无序。临界点在像磁性、液相混合物以及超流这样的物理系统中广为人知。2010年，普林斯顿大学研究生物问题的物理学家威廉·拜亚勒克 (William Bialek) 和巴黎高师 (École Normale Supérieure in Paris) 的同事蒂埃里·莫拉 (Thierry Mora) 认为很多生物系统，从鸟群到大脑神经网络再到蛋白质的氨基酸序列，也有可能接近临界状态。&lt;/p&gt;

&lt;p&gt;拜亚勒克和同事们说，通过在临界点运行，一个系统会经历巨大的波动，从而使它的各组成部分能够处于众多不同的构象。所以，莫拉说：“处于临界状态可以获得应付复杂而不可预知的环境所必须的灵活性。”除此之外，接近临界的状态对于环境的扰动十分敏感，可以向整个系统传递涟漪效应。那可以帮厨生物系统很迅速地适应变化：比如说，一群鸟或鱼可以很快地对接近的捕食者作出反应。&lt;/p&gt;

&lt;p&gt;临界性也可以提供信息收集的机制。意大利帕多瓦大学 (University of Padova) 的物理学家阿莫斯·迈瑞坦 (Amos Maritan) 和同事们在一群“认知媒介”——可能是例如单个生物体、神经元等——组成的复杂系统中，临界状态允许系统“感知”周围正在发生什么：通过编码一种关于周边环境的“内部地图”，就像是编码了周边地形的河流网一样。“在临界状态附近保持稳定为系统提供了优良的灵活性，以及应对和适应高度可变且复杂的环境的演化优势，”迈瑞坦说。越来越多的证据表明，大脑、基因网络和动物群都确实是用这种方式组织的。临界性可能无处不在。&lt;/p&gt;

&lt;p&gt;这样的例子让我们有信心认为，生物之中确实存在物理。拜亚勒克对于生物太过于杂乱的说法没有耐心——正如他自己所说：“说我们永远无法彻底理解，这有点草率。”他有信心认为存在“一套像其他领域一样达到具有预测能力的水平的生物理论物理”。没有这个，生物就存在成为传奇和偶然事件的可能。我们可以比较肯定的一点就是生物并不是那样的，因为那样根本不合理。&lt;/p&gt;

&lt;p&gt;我们还不太知道生物的物理需要包含哪些东西。但是没有它我们就理解不了生物学。它肯定会涉及基因网络如何在面对变化的环境时既有鲁棒性又有灵活性——比如说，为什么一个失效的基因不一定致命，为什么细胞可以在不改变基因组的情况下用稳定可依赖的方式改变他们的特性。它应当能揭示为什么进化本身既可行，又有创新型。&lt;/p&gt;

&lt;p&gt;说物理学包罗万象不等同于说物理学家可以解决一切问题。他们也是在一个领域内接受培养，离开自己的领域时就像我们一样不舒服。关键不在于谁“拥有”科学中的某个问题，而是关于为思考事情的运行原理而开发出有用的工具——也就是两千多年以前亚里士多德想干的事情。物理不是物理系里的事情。世界并不在乎标签，如果我们想要理解它的话，我们也不该在乎。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;菲利普·鲍尔是科学于艺术类书籍的作者，著有《看不见的诱惑》(Invisible: The Dangerous Allure of the Unseen) 一书&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Pigliucci, M. Biology vs. Physics: Two ways of doing science? www.ThePhilosophersMag.com (2015).&lt;/li&gt;
  &lt;li&gt;Perunov, N., Marsland, R., &amp;amp; England, J. Statistical physics of adaptation. arXiv:1412.1875 (2014).&lt;/li&gt;
  &lt;li&gt;Hoel, E.P., Albantakis, L., &amp;amp; Tononi, G. Quantifying causal emergence shows that macro can beat micro. Proceedings of the National Academy of Sciences 110, 19790-19795 (2013).&lt;/li&gt;
  &lt;li&gt;Walker, S.I., Kim, H., &amp;amp; Davies, P.C.W. The informational architecture of the cell. Philosophical Transactions of the Royal Society A 374 (2016). Retrieved from: DOI: 10.1098/rsta.2015.0057&lt;/li&gt;
  &lt;li&gt;Walker, S.I., Cisneros, L., &amp;amp; Davies, P.C.W. Evolutionary transitions and top-down causation. arXiv:1207.4808 (2012).&lt;/li&gt;
  &lt;li&gt;Walker, S.I. &amp;amp; Davies, P.C.W. The algorithmic origins of life. Journal of the Royal Society Interface 10 (2012). Retrieved from: DOI: 10.1098/rsif.2012.0869&lt;/li&gt;
  &lt;li&gt;“DNA as Information” Theme issue compiled and edited by Cartwright, J.H.E., Giannerini, S., &amp;amp; Gonzalez, D.L. Philosophical Transactions of the Royal Society A 374 (2016).&lt;/li&gt;
  &lt;li&gt;Mora, T. &amp;amp; Bialek, W. Are biological systems poised at criticality? Journal of Statistical Physics 144, 268-302 (2011).&lt;/li&gt;
  &lt;li&gt;Hildalgo, J., et al. Information-based fitness and the emergence of criticality in living systems. Proceedings of the National Academy of Sciences 111, 10095-10100 (2014).&lt;/li&gt;
  &lt;li&gt;Bialek, W. Perspectives on theory at the interface of physics and biology. arXiv:1512.08954 (2015).&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/TR-why-physics-is-not-a-discipline</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/TR-why-physics-is-not-a-discipline</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：青涩的爱人</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文转自草榴社区，原作者不详。本文包含对性的描写，未成年人请不要阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;一&quot;&gt;（一）&lt;/h1&gt;

&lt;p&gt;四点半放学的时候，我打了个哈欠，拎起书包准备走人，方俊扬叫住了我。方俊扬是个女孩子，跟我关系还算不错，平常虽算不上是热情，倒也有点来往。我对她的印象挺好。&lt;/p&gt;

&lt;p&gt;她走到我面前，看着我，好像要开口说什么，一时僵住了，没有说出来，一片红晕浮上了脸颊。&lt;/p&gt;

&lt;p&gt;我也呆了一呆，觉得有什么特别的事情要发生。我从来没有这么近地看她的脸，现在才发现她的五官那么细腻。她的瞳仁非常地黑，小鼻子有一点翘。&lt;/p&gt;

&lt;p&gt;看到我这么看她，她微微低了一下头，然后说：“我有几个化学配平题，想问一问你。”虽然神态很平静，但声音上有些发颤。&lt;/p&gt;

&lt;p&gt;这显然是借口。虽然我的化学还可以，但是她同桌就是化学课代表，而且她自己也是排名前十，找我求教毫无道理。我脑子里转着这些念头，还没来得及回答，她又说：“本来明天可以问你，但是借来的参考书明天就要还，所以你可不可以晚上来我家？”&lt;/p&gt;

&lt;p&gt;这几句话是一口气不停地说的，说完了她就睁大了眼睛看着我，好像松了一口气似的，倒搞得我紧张起来。&lt;/p&gt;

&lt;p&gt;方俊扬是田径队的，身材纤细而灵活，短头发，性格有点像男孩子，很少婆婆妈妈的，这点我很欣赏。我正在琢磨她的用意，没有马上回答。她着急了，小声说：“没关系的，我家里人不在。”&lt;/p&gt;

&lt;p&gt;“啊？”&lt;/p&gt;

&lt;p&gt;她忽然意识到这句话的误导性，脸全都红了，好不容易才保持镇定：“我是说，大概七点半，可以吗？”&lt;/p&gt;

&lt;p&gt;现在如果拒绝，好像毫无理由，所以我答应了。再说，谁会拒绝呢。虽然她不是特大美女，但我觉得她令我感到舒服想起她的眼睛，又黑又深，我心里一动。&lt;/p&gt;

&lt;p&gt;晚饭时我竭力回想与她曾有过的交往，以及她邀请我的动机，结果完全不得要领，还差点把饭吃到鼻子里去了。七点时我换了一条刚洗过的牛仔裤，套上恤衫出了门。她家离我家不远，初秋的晚上，微风习习，一刻钟之后我晃到了她家门口。她家是那种旧式平房，门口还有个小院子，一架葡萄。&lt;/p&gt;

&lt;p&gt;我正在犹豫是不是太早了，纱门“吱”地一响，方俊扬走了出来。她穿着牛仔短裤，无袖恤衫，粉红色的拖鞋，边走边从口袋里掏钱。看见我，她乍一惊，然后不好意思地笑了。&lt;/p&gt;

&lt;p&gt;“你好早啊，我还打算出去买个西瓜招待你呢！”&lt;/p&gt;

&lt;p&gt;她的脸又红了，简直好像从放学到现在就没褪过。不过也难怪，因为我紧紧盯着她的腿看。为什么以前没有注意到她的腿这么好看？修长，但是又显得光滑而饱满。我收回目光，说：“不用买了，我刚吃了饭，很饱。”&lt;/p&gt;

&lt;p&gt;她思索了一下：“那也好，你先进来坐吧，等会儿再说。”&lt;/p&gt;

&lt;p&gt;我跨进门里。走过她身边时，闻到香皂的气味，似乎是年轻的身体自然散发出来的。她不经意地往后缩了一下，是怕我吗？&lt;/p&gt;

&lt;p&gt;“前面左手边是我的房间。”她的声音从背后传来。我还是第一次进女孩子的房间，而且又是单独相处，不禁微微吸了一口气。&lt;br /&gt;
房间里的东西很简单，能坐的地方只有一把椅子和一张床。椅子背上挂了衣服，我想了一想，只好坐在床上。心里稍稍觉得有些冒失，但是……&lt;/p&gt;

&lt;p&gt;方俊扬端着两杯可乐走进来，看到我坐在床上，似乎明白了什么，不好意思地笑笑，放下东西，把散乱的衣物收走。有一条内裤掉在地上，搞得她很尴尬，还好我装作没看见。她弯腰时，我又忍不住去欣赏她的臀部，确实是很漂亮的臀部，我……&lt;/p&gt;

&lt;p&gt;她忽然抬起头，吓了我一跳。&lt;/p&gt;

&lt;p&gt;“怎么了？”我问。&lt;/p&gt;

&lt;p&gt;她不做声，然后慢慢在我身边坐下。沉默了好像有一分钟，然后开口，很小声的：“我找你来，不是要问你问题。”&lt;/p&gt;

&lt;p&gt;她用手指在我俩之间的床单上划来划去，然后抬起头。我又看见她深黑的瞳仁，还有颤抖的嘴唇。从领口看下去，可以看见小巧而饱满的乳房。&lt;/p&gt;

&lt;p&gt;“我……我喜欢你。”她说。&lt;/p&gt;

&lt;p&gt;我可以看出来她浑身都在发抖，不过没关系，因为我也在发抖。她的表白直接而又动人，我没法子不喜欢她。&lt;/p&gt;

&lt;p&gt;她的手指划来划去，慢慢刮到了我的牛仔裤边上：“我也不知道为什么……我天天都盼着见到你，晚上呆在家里，就想去找你。一靠近你，我就感到心里很暖。我不敢告诉你，又憋得很难受，我不知道是怎么了……”&lt;br /&gt;
她把脚缩到床上，稍稍往后挪了一挪，抬起脸来看我，眼里有东西在闪。我很想抱她，因为她那么可爱，但又怕她生气。我把手摊开，伸到她面前。她怯怯地把右手放在我手上。&lt;/p&gt;

&lt;p&gt;“你不会看不起我吧。看不起也没关系。这样总比难过死好。”她细声说。&lt;/p&gt;

&lt;p&gt;我没说话，轻轻捏住她的手指。&lt;/p&gt;

&lt;p&gt;她满足地长叹了一口气，闭上了眼，喃喃地说：“我真没用，谈恋爱也没见过我这样的，一点谱也没有就要死要活的。”&lt;br /&gt;
她慢慢地把身子倾向我，脸蹭在我胸前，滑下去，最后就无声无息地把头枕在我大腿上，像个孩子般发出满足的呻吟。&lt;br /&gt;
我总算理平了混乱的思绪，想要开口说些什么。她温暖的鼻息使我生出阵阵冲动，幸好我的牛仔裤够厚，不然就麻烦了。&lt;/p&gt;

&lt;p&gt;“我……我不会看不起你的。”我说。&lt;/p&gt;

&lt;p&gt;天哪，我怎么会说这个！我就不能说点别的吗？听起来毫无诚意。不过她好像不在乎，只是把头动了一动，好枕得舒服一点。她的右手手指在我手掌心里轻轻摩擦，柔嫩的嘴唇在我的衣服上蹭来蹭去，梦呓一般地小声念叨：“没关系，我管不了那么多了。我都告诉你了，你把我怎么样都没关系。真舒服，被你弄死也甘心。嗯……”&lt;/p&gt;

&lt;p&gt;我很感动，当然也很爽，竟然有女孩子这么为我着迷，为什么以前我不知道我这么有魅力？不知道她到底喜欢我什么？我想问问她，但是又不知从何问起。我松开她的手，轻轻抚摸她的脸。她颤抖着闭紧了眼睛，好像一只小猫，松开的右手伸到我背后，搂住了我的腰。&lt;/p&gt;

&lt;h1 id=&quot;二&quot;&gt;（二）&lt;/h1&gt;

&lt;p&gt;“嗯……你为什么喜欢我？”我犹豫了半天，还是问了。&lt;/p&gt;

&lt;p&gt;她睁开眼睛，转过头来看着我：“我说了你可不要笑我。”&lt;/p&gt;

&lt;p&gt;“我不笑你。”&lt;/p&gt;

&lt;p&gt;“因为你的气味。”&lt;/p&gt;

&lt;p&gt;“气味？”我很惊讶：“我有什么特别的气味？”&lt;/p&gt;

&lt;p&gt;“不是普通意义上的气味，”她又把头转回去埋在我衣服里：“好像是气味一般的东西。我也悄悄问过要好的女生，她们都感觉不到。”&lt;/p&gt;

&lt;p&gt;“好闻的？”&lt;/p&gt;

&lt;p&gt;“嗯，那当然，快迷死我了。像冬天晒过的棉被，又像刚刚削尖的铅笔。”她重新从我怀中抬起头来，指尖划拉着我的胸口：“我只是描述我的感觉，离你越近，感觉越强。你还记得上次运动会我和你商量写稿的事吗？那次我强忍着，不然真会在你面前坐在地上。腿完全软了，气也喘不上来，真想靠到你怀里。还有……”&lt;/p&gt;

&lt;p&gt;“还有什么？”&lt;/p&gt;

&lt;p&gt;她忽然一下脸羞得通红，把头抵在我胸口，说：“现在不能告诉你。”&lt;/p&gt;

&lt;p&gt;她在我胸口定了一会儿神，又说：“今天找你来，本来只是想找个借口接近你，没打算告诉你。可是后来看到你坐在我床上，就想‘完了完了，今后一个礼拜别想在这张床上睡着了，还是告诉你了吧’。就是这样。”&lt;/p&gt;

&lt;p&gt;她喘了一口气，重新坐直，两只脚挂在床沿，轻轻互相搓着。这动作看得我都快流鼻血了。怎么办？事到如今，说什么也不能退，退了她肯定得伤心死。我深吸了一口气，凑过去吻她的嘴唇，她本能地向后一缩，但是我的手揽住了她的头，稍稍一用力，她就屈服了，我们的嘴唇贴在了一起。一瞬间，我感到她的身子完全瘫软了，两个人不由自主地往床上倒下去。&lt;/p&gt;

&lt;p&gt;我用手把身子撑住，她把两臂环住我的脖子。因为紧张，她的嘴唇冰冷，但是柔软，急促的呼吸使她紧贴着我的胸部不停起伏。她轻柔地吸吮我的嘴唇，动作生涩而羞怯，纤细的舌尖偶尔舔到我的牙齿。&lt;/p&gt;

&lt;p&gt;我轻轻把她放平在床上，搂住她的腰，让她的身子紧贴我的。她不自觉地挪动身子配合我，裸露的大腿贴在我的敏感部位。我们继续沉醉在亲吻中，用舌尖互相试探。我偷偷睁开眼看她，她的脸显现出美丽的粉红色，娇嫩的嘴唇散发着欲望的气息。搂着我脖子的手无意识地拨弄我的头发，弄得我很舒服。她的上衣被稍稍拉高了，露出了短短一节腰部。我的手从她背上滑下去，轻轻抚摸那里光滑的皮肤。&lt;/p&gt;

&lt;p&gt;她一下子绷紧了身体，紧紧抓住了我的头发，一条腿绕住了我的大腿。我可以感觉到她的脚趾全都蜷紧了。她的热情鼓励了我，我把手慢慢向下滑去，指尖插入了短裤和身体之间，碰到了内裤的边缘。&lt;/p&gt;

&lt;p&gt;她突然惊醒了，噌地一下从我怀中弹开，缩到了床头。抱着膝盖，她把头埋在胸前，一句话也不说。&lt;/p&gt;

&lt;p&gt;我很后悔自己这么急色，毕竟她对我表白才不到半小时，不可能马上如此放得开。现在看起来事情要砸，得想个什么办法补救才好。说实话，她的表白使我对她从好感立刻达到了喜欢的程度。不是有人说过吗，“爱我的女孩最美丽。”这其中也有一份男性的虚荣心在作怪吧。现在如果弄僵了，我还真是很舍不得。&lt;/p&gt;

&lt;p&gt;我看着她，想着要说什么赔罪的话。她先开口了：“你们男生……都是这样的吗？”&lt;/p&gt;

&lt;p&gt;“呃……可能是天性如此吧！对不起。”我小心翼翼地说。&lt;/p&gt;

&lt;p&gt;“刚认识就动手动脚？是天性吗？”她的话语里听不出生气的意思。&lt;/p&gt;

&lt;p&gt;“呃……这……我……我也是第一次和女孩这么亲密，而且你这么漂亮。”我汗都下来了，不知该说什么好。&lt;/p&gt;

&lt;p&gt;她跪坐起来，凑近我，催眠般黑色的眼睛认真地注视我，问：“这是真心话吗？”&lt;/p&gt;

&lt;p&gt;“是的。”我完全被她的眼睛吸住了，毫不犹豫地说。&lt;/p&gt;

&lt;p&gt;“那你……喜欢我吗？”&lt;/p&gt;

&lt;p&gt;“喜欢。”我真诚地说。&lt;/p&gt;

&lt;p&gt;她目不转睛地看着我，然后垂下眼帘，说：“对不起，刚才我很害怕，很紧张。你别生气，好吗？”&lt;/p&gt;

&lt;p&gt;“没生气。”&lt;/p&gt;

&lt;p&gt;她小心地咽了一口口水，用轻得几乎听不见的声音说：“其实……很舒服。但是现在太快了，我怕。”&lt;/p&gt;

&lt;p&gt;我想开口说什么，她按住我的嘴，说：“再亲我一次吧。刚才好棒，我真以为自己会昏死过去呢！”&lt;/p&gt;

&lt;p&gt;我搂住她的腰。出乎意料地，她竟跨坐到我的大腿上。她坐下去时，我清楚地听见她发出满足的叹息。闭上了眼，她悄然靠近我，玫瑰花蕊般的嘴唇微微噘起，等待着我的吻。&lt;/p&gt;

&lt;h1 id=&quot;三&quot;&gt;（三）&lt;/h1&gt;

&lt;p&gt;那后来的整个晚上我们都消磨在爱抚之中。没有激烈的抚摸和火辣的深吻，只是轻柔的拥抱，互相品尝般的接吻。她关了灯，让月光从纱窗透进来。微风、蝉鸣、凤仙花的淡淡香气，还有她嘴唇那天堂般的触觉、柔软的胸部似有似无的压迫感，构成了难以忘记的回忆。&lt;/p&gt;

&lt;p&gt;十点时我不得不离开她家，因为我那常年出差的父母偏要在今晚回家。她一声不响地把我送到门口，拉着我的手轻声说：“今天……谢谢你。”&lt;/p&gt;

&lt;p&gt;我想不出该说什么，只好说：“我该走了。明天见。”&lt;/p&gt;

&lt;p&gt;她点点头，却拉着我的指尖不放。&lt;/p&gt;

&lt;p&gt;我轻轻勾勾她手指，她听话地靠近我。站着的时候，她的下巴刚好到我的肩头。门口的草丛里有一只蟋蟀在唱，使夜显得越发安静。&lt;/p&gt;

&lt;p&gt;这一夜并没有使我们成为恋人，但我觉得我们之间的信任与默契也许要超过许多多年的情侣。在回家的路上我不断地回味她的羞涩与温暖，她诱人的体香与光滑的肌肤。我在迷糊之中走错了单元门，用钥匙捅了半天别人家的门后尴尬地道歉离开。但总的说来，这是我出生十六年来最快乐的夜晚。&lt;/p&gt;

&lt;p&gt;在后来的一个星期里她没有主动接近我，我想这是女生自然的矜持。也许我该主动找她谈谈，可是又一时得不到机会。有时上课时，我可以感觉到坐在我右侧两个座位以外的她在看我。我会转过去看她，而她也并不躲开。&lt;/p&gt;

&lt;p&gt;在秋日下午催眠般的政治课中，整个教室里似乎只有我和她。有一次在发作业时，她碰到了我的手。我们在作业本下轻轻抚摸对方的指尖，我在她脸上又看到了接吻时她那迷醉的表情－－虽然仅仅是一瞬间。我们的关系有一种秘而不宣的甜蜜，全世界也许只有我们知道，她愿意把她那年轻而青涩的身体交给我来爱抚。&lt;/p&gt;

&lt;p&gt;礼拜五放学后，我坐在教室里思考回家吃饭还是吃食堂。父母只回来待了三天就又匆匆离家工作奔忙去了，抛下了我这个情绪不成熟期的青少年，真不知他们是怎么想的。我猜我是全校唯一会自己做饭做菜的男生，因为校食堂实在像是猪圈，而我对自己要求很高－－吃的方面。我小姑妈对我做的菜很赞赏，她自己是个厨房白痴，父母不在时，她经常会买了菜来看我，那时我就自己做饭。&lt;/p&gt;

&lt;p&gt;这时我听见方俊扬叫我的名字。她走到我课桌边站住，睫毛下垂，没有直接看我的眼睛。她的左手轻轻刮着桌面，夕阳透过窗户照亮了她的手背，细微的汗毛闪着金色的光。&lt;/p&gt;

&lt;p&gt;“晚上……”她字斟句酌似的说：“来我家好吗？”&lt;/p&gt;

&lt;p&gt;我看着她，半是喜欢，半是得意，忽然起了开玩笑的念头，于是假装诚恳地说：“我……今天晚上有事走不开。”&lt;/p&gt;

&lt;p&gt;“那就算了，没关系。”她怎么样也不能掩饰心中的失望，低了头，转身要走，我连忙拉住她的手：“逗你呐。晚上几点？”&lt;/p&gt;

&lt;p&gt;她猛地转过头来，一张脸涨得通红，用力摔了我的手：“你！”拎起书包就往外跑。我后悔得要命，追出去，在教室门口拉住她，认真地说：“我晚上一定  来。”&lt;/p&gt;

&lt;p&gt;她死命掰开我的手，眼里全是泪光，发狠的说：“不要你来，死也不要你来了。”&lt;/p&gt;

&lt;p&gt;田径队的跑起来就是快，我从四楼追到底楼，还是让她跑掉了。&lt;/p&gt;

&lt;p&gt;我回了家，晚饭也没心思吃，坐在屋里发呆。我承认我非常喜欢她，那为什么要做这种蠢事？想了半天，也没有想通，屋里也呆不住，只好下楼去转转。楼前有一块草坪，邻居家的俩小孩在玩闹，我看着四楼的小捣蛋硬是把比他大一岁的女孩弄哭了，不禁大怒，上去把他狠狠教训了一顿。完了我感到无比懊丧，想着不如出去买包烟。&lt;/p&gt;

&lt;p&gt;在弄堂口，我看到一个熟悉的人影一晃，心里一动，直追上去。过了一个转角，我停住脚步。&lt;/p&gt;

&lt;p&gt;方俊扬站在那里，睁大了眼睛看着我，背紧紧贴着墙。她穿着雪白的细肩带连身短裙，那双我见过的粉红色拖鞋。她脸上泪还没干，但作出很坚强的表情。&lt;/p&gt;

&lt;p&gt;我贴近她，她把脸别过去不看我。我轻声问：“你怎么来了？”&lt;/p&gt;

&lt;p&gt;“我以为你会来找我。”&lt;/p&gt;

&lt;p&gt;“我以为你生我的气了。”我说。&lt;/p&gt;

&lt;p&gt;“是的，”她转过头来看着我：“是很生气……可是又很想你，想得受不了了。”大颗大颗的泪珠从她眼里拥出来。我吻住她，她一边哭一边用力亲吻我，搂得我紧紧的，手指陷入我的背脊。&lt;/p&gt;

&lt;p&gt;有自行车从弄堂那头过来，我们松开了对方。我拉着她靠到墙边，对她说：“去我家坐坐吧。”&lt;/p&gt;

&lt;p&gt;“不行呢，我得回家了。食堂还蒸着我的饭呢。”原来她也是父母出差，在吃父母单位的食堂。&lt;/p&gt;

&lt;p&gt;我笑着说：“我也没吃。我给你做，我们一块儿吃吧。”&lt;/p&gt;

&lt;p&gt;“你还会做饭？”她不太相信。&lt;/p&gt;

&lt;p&gt;“特级厨师，吃一次包你忘不了。”&lt;/p&gt;

&lt;p&gt;“嗯，食物中毒吧。”她带着泪笑着说。&lt;/p&gt;

&lt;p&gt;她还是跟我回了家，还帮我在厨房打下手。我们在厨房的小餐桌上并排吃着饭，天气有点热，她的短发被电扇吹起，她一边吃一边拨拉。我们的腿不时在桌下相触，我可以看见她的脸一点一点变绯红。&lt;/p&gt;

&lt;p&gt;“这个蘑菇炒青椒不错，你哪儿学的？”&lt;/p&gt;

&lt;p&gt;“菜谱。”&lt;/p&gt;

&lt;p&gt;“是吗？怎么以前没见过这种做法。”&lt;/p&gt;

&lt;p&gt;“是西菜做法。”&lt;/p&gt;

&lt;p&gt;其实我是胡掰的。小姑妈不会做菜，也不会买菜，买来的菜都不好搭配，我也只好乱配了。&lt;/p&gt;

&lt;p&gt;俊扬很喜欢吃蘑菇，但她用筷子很笨，圆圆的蘑菇夹掉了好几次，我忍不住笑了。她也有些不好意思，嗔道：“应该切片的嘛。”&lt;/p&gt;

&lt;p&gt;“你自己不行也不要怪蘑菇嘛，我挟给你吧。”&lt;/p&gt;

&lt;p&gt;结果我也挟不起来，因为那个蘑菇特别圆。我干脆用手拿起来递给她：“吃吗？”她害羞地看了我一眼，把嘴凑上来。好像电影慢动作一样，她轻轻咬住蘑菇，把它含到嘴里。&lt;/p&gt;

&lt;p&gt;我松开手，却发现她含住了我的手指。“嗒”的一声，她的筷子掉在地上，她不由自主地用手撑住我的膝盖。我把手一点一点往回缩，她就一点一点地往前凑，渐渐把我的手指全部含进嘴里。&lt;/p&gt;

&lt;p&gt;我一边用小指挠着她的下巴，一边仔细地看她的表情。她闭着眼，仰起了脖子，享受着我对她下巴的爱抚，双手按紧了我的大腿。我听见她从喉咙里发出轻微的呻吟，似乎在品尝鲜嫩的水果。&lt;/p&gt;

&lt;p&gt;我慢慢抽出手指，和她接吻。我们已经接吻过很多次，但每次都那么令人目炫神迷。我沿着凳子把她拉过来，让她骑到我腿上，被我搂着腰。因为她的短裙和我的短裤，我们有大片的肌肤相接触。我可以感到我的某一部份在变坚硬，而她的脸也一直红到了脖子，以至胸口。&lt;/p&gt;

&lt;p&gt;但我们当然没有分开的意思，这样的姿势我俩都非常享受。她甩掉了拖鞋，用脚轻轻摩擦我的小腿，圆润的脚趾拨弄我的脚踝，带来一阵阵奇妙的感觉。我还感到她的臀部在我的大腿上缓缓左右移动，使我偶然能隔着内裤感觉到她两腿中间温软的部分。我不由自主地幻想，不知道那部分会给我怎样温柔的触觉呢？&lt;/p&gt;

&lt;h1 id=&quot;四&quot;&gt;（四）&lt;/h1&gt;

&lt;p&gt;我们终于不得不因为炎热而暂时停止亲热，初秋有时确实比夏天还热。她仍坐在我身上，端着碗，挟菜给我吃。有好几次我故意咬住筷子不放，她就会意地亲吻我，让我乖乖听话。我的下身仍旧很坚硬，但她假装没感觉到，虽然我发现她时不时挪动身子，不经意地稍稍蹭我一下。如果我现在要求做爱，很有可能她会顺从我。但……我觉得现在这样，似乎更让我开心、自在。&lt;/p&gt;

&lt;p&gt;她虽然没有多说话，但我看得出来，她也非常开心，全心全意地在享受现在的每一刻。从她的脸上，隐隐散发出喜悦的光。我越来越觉得，她是我见过的最美丽的女孩子。&lt;/p&gt;

&lt;p&gt;吃完饭，我们都出了很多汗，我建议她去洗个澡。她低头不语，过了一会儿  说：“我没衣服换……”&lt;/p&gt;

&lt;p&gt;我忽然意识到我已经不由自主地假设她晚上会呆在我家了，不禁吓了一跳，暗暗观察她的脸色。她也抬起眼看我，忽然也想到了这一点，脸一下变得绯红，立刻冲到门边：“我……我该回去了。”&lt;/p&gt;

&lt;p&gt;我拉住她的手：“留在我这里吧，我很喜欢。”&lt;/p&gt;

&lt;p&gt;她不说话，轻轻靠在我胸前。&lt;/p&gt;

&lt;p&gt;在她洗澡时我扭开收音机，寻找一个放外国歌曲的台。在轻微的短波静噪中传来某个七○年代乐队的歌声。浴室的水声清晰可闻，在歌声中我想像着她裸露的姣好躯体，如梦似幻。&lt;/p&gt;

&lt;p&gt;后面几个小时我们干了什么我记不清了，我只知道她从浴室出来时我两眼发花，几乎晕倒。我只给了她汗衫，却没给短裤，她只好下身只穿一条内裤，红着脸从浴室出来。我的汗衫又长又大，穿在她身上使人无法不想入非非。&lt;/p&gt;

&lt;p&gt;她非常恼火，认定是我故意不给她短裤，虎着脸不和我说话。为了不让我色迷迷地看她的腿，她坐到我床上，用毛巾被盖着下半身。后来我给她看我小时候的照片，才重新逗得她开心。我们好像还打了牌，讲了笑话，说了很多自己过去的事……但是我无时无刻，没有不在想盖在毛巾被下诱人的身躯。&lt;/p&gt;

&lt;p&gt;她的脸上渐渐有了倦意，“想睡了？”我问。&lt;/p&gt;

&lt;p&gt;“嗯。”她揉揉眼睛。&lt;/p&gt;

&lt;p&gt;“那我去我爸妈房间睡了。”&lt;/p&gt;

&lt;p&gt;“嗯。”她答应着，却没有告别的意思。&lt;/p&gt;

&lt;p&gt;“有什么需要可以叫醒我。”我随口说。&lt;/p&gt;

&lt;p&gt;她抓住了我话里的漏洞，促狭地笑了：“放心，没什么需要。”&lt;/p&gt;

&lt;p&gt;这个小妖精！我抓住她的手腕，恶狠狠地凑近她：“可是我可能有。”&lt;/p&gt;

&lt;p&gt;她睁圆了眼认真地看着我：“我是很相信你的，你要什么，就来拿去吧。”然后她心满意足地闭上眼，缩进了毛巾被里。&lt;br /&gt;
毛主席说过：“世上怕就怕认真二字”。我深有同感，乖乖地退出了房间。&lt;/p&gt;

&lt;p&gt;晚上我做了一个梦，我站在空中俯瞰一片巨大的草原，她坐在草原中间。草很高，很密，处处开着不知名的花。阳光明媚，我慢慢下降，风卷着粉色的花瓣在她身边飞舞。有时候，一些美丽的东西会让你心疼得抽搐。&lt;/p&gt;

&lt;p&gt;我从梦中惊醒，炎热的空气凝固在我的周围。我翻过身，背对窗外的月光，想着一步之遥的方俊扬，心里一半是被纵容的欲望，一半是甜蜜的爱意。与其去获得终极的快乐，我更喜欢现在这种亲密的信赖。这种信赖，大半是由于她的主动。我不禁想到，如果是我采取这种主动，很有可能被当成流氓打个半死。男女真是不平等，我忿忿不平了一会儿，准备继续睡。&lt;/p&gt;

&lt;p&gt;房门被缓缓推开，方俊扬纤细的身影出现在门口，静止的空气中她的身躯似乎在轻轻摇摆。她走到床边，轻手轻脚爬上床，跪在我身边注视着我。我想她是在看我睡熟没有。她一动不动地看了我十五分钟，弄得我肌肉都快僵硬了。月光照在她专著的脸庞上，她的睫毛在颤动。&lt;/p&gt;

&lt;p&gt;她确定我睡得很沉，试探性地捉住我的手，我继续装睡。她捧起我的手，轻轻把自己的脸颊贴在我的掌心。我感到一片光滑而温热的肌肤，指尖可以触到耳后飞快的脉搏，在燥热的寂静中我听见她细细的喘息。&lt;/p&gt;

&lt;p&gt;我微微睁开眼，看见她的另一只手在背后摸索着什么，接着猛地一扯，一片白色轻轻从她衣内滑落，搭在床边。她撩起衣服，把我的手拉进里面。不知是光线还是因为紧张，她的嘴唇苍白，毫无血色。&lt;/p&gt;

&lt;p&gt;我闭上了眼，不忍心看到她那令人心疼、怜爱的表情。这也许是她死也要保守的秘密，一个年轻女孩心中不能遏制的欲望。她轻轻按下我的手掌，我的掌心感受到她急促起伏的肋骨，指尖触到了她乳房的下缘，她的心跳像电流一般穿过我的身体。&lt;/p&gt;

&lt;p&gt;她用两手把我的手按在左边乳房上，让手掌完全包着它，空气中充满了她身体的馨香，还有压低的喘息。娇嫩的乳头贴着我的掌心，剧烈的心跳似乎要穿破脆弱的胸腔，我似乎意识到，我手里掌握的，是她的整个生命。&lt;/p&gt;

&lt;p&gt;好像遥远的地方白鸟在唱歌似的，传来她的自言自语：“真舒服……你知道吗，一直都很想呢，想你摸我这里……我太喜欢你了，心都疼了……”&lt;/p&gt;

&lt;p&gt;我忍不住偷看她。她的脸上泛着光，衣襟下露出一截雪白的腰肢。她脖子上的汗顺着颈根往下流，滴到了我的指尖，我的手不由自主的轻轻一抽。&lt;/p&gt;

&lt;p&gt;受惊的小白兔从我手中逃走了，她向后一窜，就到了门边。门无声地掩上，方俊扬消失了，房间里重新陷入一片黑暗，空气缓缓凝结。&lt;/p&gt;

&lt;p&gt;我屏息等待。在我面前的床边搭着她刚才脱下的胸罩，白色的，有细微的花边，似乎她整个灵魂都还在那上面，气味芬芳。一个小小的白色蝴蝶落在一边，那是一侧的搭袢，她刚才急着扯下来时脱落的。&lt;/p&gt;

&lt;p&gt;我轻轻触摸那白色的肩带，细微的电流再次穿过我的身体。我就这样一动不动躺了很久，直到窗外的天色渐渐变白。&lt;/p&gt;

&lt;p&gt;将近日出时分，房门轻轻一动，我急忙翻身侧向另一面。背后传来赤足在地板上迅速蹑足而过的声音，“嗤”地一下轻响，我知道她把胸罩取走了。&lt;/p&gt;

&lt;p&gt;我静静听了很久，屋里再也没有什么声音。我摊开手掌，一只小小的蝴蝶停在我手心。&lt;/p&gt;

&lt;p&gt;“你像只蝴蝶在天上飞……”我轻声唱道。&lt;/p&gt;

&lt;h1 id=&quot;五&quot;&gt;（五）&lt;/h1&gt;

&lt;p&gt;后来我睡得很沉。早上十一点左右，我被太阳晒醒了。我的房间已经空了，方俊扬大概在清晨离开了我家，并不是什么令人惊讶的事。我的毛巾被叠得好好的，席子上残留着她的气味，书桌上有一张她留下的字条：&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;“我先回家了。Ｔ恤我很喜欢，带走了。&lt;/p&gt;

  &lt;p&gt;方俊扬”&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;我坐在床上，用手摩擦着席子，把那张字条读了很多遍。&lt;/p&gt;

&lt;p&gt;秋天真正地来了，天气凉了，功课变得紧张。学校安排了教室，组织自愿的同学参加晚自修。我和方俊扬因为是“无人管教的小孩”，也被班主任劝说“自愿”参加了。我是无所谓的，反正晚上在家里也没事，而且晚自修的管理也很松弛。放课后我和她会结伴回家。但是，很可惜地，从那次以后她就再也没有提起我们单独相处的想法，虽然在学校里，她还是会一般的亲切。&lt;/p&gt;

&lt;p&gt;礼拜四，晚自修课间休息。教语文课的王老太太值班。她是个宽容的人，似乎从未发现课间休息后有许多同学不知去向。我没有那么嚣张，但是在课上我从没有正经自修过，只是把高阳的“红顶商人”包了参考书皮，读得兴致勃勃。提高文学修养，无可厚非。&lt;/p&gt;

&lt;p&gt;我和方俊扬在礼堂边上遛哒。她穿了一件浅灰色的高领毛衣，很贴身。我穿着……我穿什么想来你也没有兴趣。她给我看一个钥匙圈上的小东西，那是个哨子，但不是吹的。我鼓捣了半天，她笑着告诉我：“你把它扔出去，空气穿过，就会响。”&lt;/p&gt;

&lt;p&gt;我把它用力向上一抛，果然“呜”地一声哨响。&lt;/p&gt;

&lt;p&gt;我抛接了好几次，结果有一次不小心，抛歪了。钥匙串落下时，穿过了礼堂的窗户，掉进了礼堂里头。&lt;/p&gt;

&lt;p&gt;礼堂的门已经锁了，我在窗外看了半天，决定沿着水管从气窗爬进去。她很担心：“算了吧，别爬了，明天来拿。” 
“那你怎么回家？”&lt;/p&gt;

&lt;p&gt;“嗯……”她也没了主意。&lt;/p&gt;

&lt;p&gt;我禁不住想说“不如晚上睡我家”，又怕被她骂。罢了，还是爬水管吧！&lt;/p&gt;

&lt;p&gt;虽然我体育成绩平平，但小时候没少干翻墙爬树的事。气窗上都是灰，礼堂里一片漆黑。我从窗台上跳落地，在地上摸索着寻找。&lt;/p&gt;

&lt;p&gt;窗棂上“喀嗒”一响，我看见她轻盈地钻过半个身子，骑坐在窗台上。&lt;/p&gt;

&lt;p&gt;“找到了吗？”她问。&lt;/p&gt;

&lt;p&gt;“还没有。好黑。”&lt;/p&gt;

&lt;p&gt;“那我下来一块儿找吧。”她朝下看看：“好高啊，不敢跳。”&lt;/p&gt;

&lt;p&gt;“我接着你。”我说。&lt;/p&gt;

&lt;p&gt;“小心伤着你。”&lt;/p&gt;

&lt;p&gt;我从边上拉来一块体育课用的垫子，站在上面。脚下“喀”地一声轻响，我发现我踩到了那串钥匙。&lt;/p&gt;

&lt;p&gt;“你跳吧，我这儿有垫子。”我说，一边把钥匙悄悄揣到口袋里。&lt;/p&gt;

&lt;p&gt;她悄然无声地跃下，落入我的怀中，我们双双倒在垫子上，她轻盈的身躯被我抱在怀里，轻轻地喘着气。&lt;/p&gt;

&lt;p&gt;“你没事吧？”她问。&lt;/p&gt;

&lt;p&gt;“没事。”&lt;/p&gt;

&lt;p&gt;我们不再说话，静静地搂抱在一起，我的额头上感到她呼出的气息。&lt;/p&gt;

&lt;p&gt;课间休息结束的铃忽然响了，她坐起来：“我们再翻窗出去？”&lt;/p&gt;

&lt;p&gt;“嗯，好。”我怅然若失地说。&lt;/p&gt;

&lt;p&gt;她站起来，忽然一个趔且，我急忙扶住她。&lt;/p&gt;

&lt;p&gt;“我的右脚好像扭了。”她小声说。&lt;/p&gt;

&lt;p&gt;在黑暗中我为她除去鞋袜，按摩她的脚踝。她的脚踝纤纤一握，脚跟光滑圆润，握在手中使我意乱情迷。寂静的礼堂里听见她细细的喘息，虽然我看不见，但我想她的脸色一定如初吻时般绯红。&lt;/p&gt;

&lt;p&gt;“你不回去自修没关系吗？”她问。&lt;/p&gt;

&lt;p&gt;“没事，王老太太不会管的。再说，反正我也是看闲书。”我说。&lt;/p&gt;

&lt;p&gt;她轻轻笑了：“看什么书呐？”&lt;/p&gt;

&lt;p&gt;“《红顶商人》，高阳的。”&lt;/p&gt;

&lt;p&gt;“噢。我在看《树上的男爵》。”她说。想不到我们是同道中人。&lt;/p&gt;

&lt;p&gt;“没听过。讲什么的？”&lt;/p&gt;

&lt;p&gt;她不说话，过了一会儿说：“一个很像你的人。”&lt;/p&gt;

&lt;p&gt;“那我就是‘爬窗的男爵’。”&lt;/p&gt;

&lt;p&gt;我们俩都笑了。&lt;/p&gt;

&lt;p&gt;她坐起来，按住我的手，把脚缩回去。&lt;/p&gt;

&lt;p&gt;“怎么，好了？”我问。&lt;/p&gt;

&lt;p&gt;“我骗你的。”她小声承认：“我没扭到脚，我想和你留在这里。”&lt;/p&gt;

&lt;p&gt;如果说有人喜欢被欺骗，那就是现在的我。我俯下身子，威胁似地贴近她：“你这个骗人的小妖精，你知道骗我要受到什么惩罚吗？”&lt;/p&gt;

&lt;p&gt;她笑兮兮地把手伸进我的衣服口袋：“那你骗人又有什么惩罚？”口袋里的钥匙圈被她拨弄得轻轻作响。&lt;/p&gt;

&lt;h1 id=&quot;六&quot;&gt;（六）&lt;/h1&gt;

&lt;p&gt;礼堂的天花板很高，两边是直通房顶的长窗，挂着直悬到地的窗帘，外面的光线几乎透不进来。在深夜的寂静中，礼堂的回音显得很清晰。我和方俊扬在垫子上拥抱，好像冬天相互依偎的小狗。她的吻湿润而婉转，充满渴望的身躯欲拒还迎。我把手从她毛衣下伸进去，抚摸她光滑的脊背。冰冷的手指使得她不住颤抖，她咬住我的舌尖，克制住自己的呻吟。&lt;/p&gt;

&lt;p&gt;“你的手好冰。”她说。&lt;/p&gt;

&lt;p&gt;“不舒服？”&lt;/p&gt;

&lt;p&gt;“没有。我喜欢你摸我。”她紧贴着我的脸，轻轻呢喃。&lt;/p&gt;

&lt;p&gt;“真的？”&lt;/p&gt;

&lt;p&gt;“真的。”&lt;/p&gt;

&lt;p&gt;我把两只手全部伸到她衣服里，她的背脊好像一件精美的乐器被我温柔地抚弄。她扣住我的肩膀，似乎怕被身体内的狂飙给吹走。我的手指插入胸罩背带下轻轻拉扯，她明显地紧张起来。&lt;/p&gt;

&lt;p&gt;“求你……不要。”&lt;/p&gt;

&lt;p&gt;“怕我？”&lt;/p&gt;

&lt;p&gt;“不是。”她摇摇头。&lt;/p&gt;

&lt;p&gt;“怕你自己？”&lt;/p&gt;

&lt;p&gt;“嗯。”她羞怯地把头埋在我怀里：“我觉得我自己已经管不住我自己了，再亲热一点，我的身子就会被吹到很远很远的地方去。”&lt;/p&gt;

&lt;p&gt;“吹到哪里我都陪着你。”&lt;/p&gt;

&lt;p&gt;她抬起头看着我。我看见她的瞳子中有喜悦的光：“你是说真的？”&lt;/p&gt;

&lt;p&gt;“嗯。”&lt;/p&gt;

&lt;p&gt;“不放开我？”&lt;/p&gt;

&lt;p&gt;“死也不放。”&lt;/p&gt;

&lt;p&gt;她看了我好久，然后把双手放到我面前：“捏住我的袖子好吗？”&lt;/p&gt;

&lt;p&gt;我迷惑地照她说的做了。&lt;/p&gt;

&lt;p&gt;她深吸了一口气，身子朝后轻快地一缩，一连串小小的静电火花伴着轻微的嗤拉声一闪而过。&lt;/p&gt;

&lt;p&gt;好像变魔术一般，她从我面前消失了。我手上只剩下留着她余温的衣服。我迷惑不解地盯着那团衣物，回想着她奇妙的脱衣动作。&lt;/p&gt;

&lt;p&gt;周围的黑暗慢慢散去，方俊扬双手抱着肩膀，跪坐在我面前。她白皙的肌肤隐隐泛着光。&lt;/p&gt;

&lt;p&gt;“来抱我。”她颤抖着说。&lt;/p&gt;

&lt;p&gt;在秋夜寒冷的空气中，方俊扬裸露着身子在我怀中瑟瑟发抖。我用尽力全力拥抱着她，亲吻她双乳间细嫩的肌肤。她的身子散发着少女的幽香，似乎可以听见生命的火花在纷纷迸裂。&lt;/p&gt;

&lt;p&gt;我隔着胸罩爱抚她的乳房，在乳房露出的上缘轻轻啮咬。她酥软在我的臂弯中，如醉如痴。我感觉到她的手钻到我的衣襟下四处摸索，小指轻挠我的小腹。-&lt;/p&gt;

&lt;p&gt;“冷吗？”我问。&lt;/p&gt;

&lt;p&gt;“不冷。”&lt;/p&gt;

&lt;p&gt;她撩起我的衣服，钻进我怀里。先是她的鼻尖蹭着我的胸口，接着两片温软的嘴唇贴了上来，她就这样亲吻着我的胸口，一动不动。我脱下外衣，披在她赤裸的背上。她裸露的肩头光洁动人，我禁不住亲了又亲。&lt;/p&gt;

&lt;p&gt;在那个晚上我们好像贪吃的孩子般互相品尝对方的身体，在各自的身上留下了无数对方亲吻的记号。每当我在夜深无人时想起她冰冷的小手在我衣衫下的摸 索，我就心潮澎湃，不能自已。&lt;/p&gt;

&lt;h1 id=&quot;七&quot;&gt;（七）&lt;/h1&gt;
&lt;p&gt;所谓乐极生悲，第二天我感冒了。连续四天，我请假在家。虽然我一直都照顾自己惯了，但是在那几天里，我非常想念她。小姑妈来看过我一次，我勉为其难地吃了她做的饭，苦口婆心地把她劝走了。&lt;/p&gt;

&lt;p&gt;第五天上午，我头昏脑胀地爬起床，想看看冰箱里有什么吃的。冰箱里空空如也。我拉开放果蔬的那一格，一个小小的蘑菇孤零零地躺在里面。我觉得自己的心也好比这冰箱一般空空的。我哭了。&lt;/p&gt;

&lt;p&gt;去学校吧。&lt;/p&gt;

&lt;p&gt;“方俊扬感冒引发病毒性心肌炎，正在住院。”&lt;/p&gt;

&lt;p&gt;这就是我到学校后得到的第一个消息。&lt;/p&gt;

&lt;p&gt;流行性感冒正肆虐全校，初二年级已经停课，这是第二个消息。虽然高中部并未停课，但在打听到方俊扬所住医院后我的病情“有了反复”，顺理成章地再次请病假回家。&lt;/p&gt;

&lt;p&gt;市一医院门口的花店生意火爆，我站在门口犹豫不决。买花探病似乎太着痕迹，与我一贯随意的形象不符，再说，遇到熟人怎么办？遇到她亲戚又怎么办？别人会怎么看我这个高中生？算了，买点水果得了。&lt;/p&gt;

&lt;p&gt;三分钟后我从花店出来，脸红耳热，手上拿着一束带满天星的康乃馨，老板的话犹在耳边：“看你妈妈？不是吧。现在的年轻人呐，呵呵呵……”&lt;/p&gt;

&lt;p&gt;妈的，老头子，笑什么笑，嫉妒我吗？&lt;/p&gt;

&lt;p&gt;我怀揣着花，以一种偷偷摸摸的方式走进方俊扬的病房。六个人的病房热闹非凡，病人们的亲友正在大开茶话会，方俊扬孤零零地躺在靠窗的角落病床，呆呆地看着窗外。&lt;/p&gt;

&lt;p&gt;我悄悄绕过床，走到她面前坐下。&lt;/p&gt;

&lt;p&gt;“你还好吗？”我把花摆在她床头柜上。&lt;/p&gt;

&lt;p&gt;方俊扬睁圆了眼睛看着我，朝我伸出右手。我拉住她的手，她一把猛攥住我的手，照着就狠狠一口咬下去。我痛得呲牙咧嘴，又不敢喊出声，只好小声劝：&lt;/p&gt;

&lt;p&gt;“别咬了……小心不消化。”&lt;/p&gt;

&lt;p&gt;她“噗嗤”笑了，松了口。我拼命甩着手，丝丝地吸着凉气。&lt;/p&gt;

&lt;p&gt;“让你也尝尝我难受的滋味。”她眼里带着泪花说。&lt;/p&gt;

&lt;p&gt;“我比你好不到哪儿去，感冒了，窝在家里四天了。”我说：“全校都是流感，初二都停课了。”&lt;/p&gt;

&lt;p&gt;“是吗？我还以为就是我一个受了凉引起的呢！”她说。她好像想到什么，脸红了一下子，然后说：“对不起，刚才痛吗？”&lt;/p&gt;

&lt;p&gt;“有点痛。”&lt;/p&gt;

&lt;p&gt;她把我的手拉进被窝，贴在自己的胸口：“我不知道你也病了，怨你不早来看我。这样手好受点吗？”&lt;/p&gt;

&lt;p&gt;我笑兮兮地说：“还有一点痛。”&lt;/p&gt;

&lt;p&gt;她看着我的脸，在被窝里撩起衣服，让我的手贴着她火热的肌肤：“那这样呢？”&lt;/p&gt;

&lt;p&gt;我有点歉意，说：“没事了，让我把手抽出来吧。我手凉，小心冻着你。”-&lt;/p&gt;

&lt;p&gt;她摇摇头：“不要。”&lt;/p&gt;

&lt;p&gt;我轻声问：“想我了？”&lt;/p&gt;

&lt;p&gt;“嗯。”她再也忍不住，无声地哭了，泪珠大颗大颗地流到枕头上：“很想你。”&lt;/p&gt;

&lt;p&gt;“我也很想你。”我说。我没告诉她我哭的事，也许我应该说。&lt;/p&gt;

&lt;p&gt;她擦干眼泪，不好意思地笑了：“其实我没事，医生说我已经可以回家休息了，但我姨妈坚持要我多住几天，她说在家也没人照顾我。”&lt;/p&gt;

&lt;p&gt;“那你爸妈呢？”&lt;/p&gt;

&lt;p&gt;“还在上海，回不来。是姨妈把我送医院的。”&lt;/p&gt;

&lt;p&gt;她叹了一口气说：“她也很忙，不能常来。看着别床的都有那么多人来看，我……”&lt;/p&gt;

&lt;p&gt;我轻轻抚摸她被子下那纤细的身子，“出院回家吧，我来照顾你。”我说。&lt;/p&gt;

&lt;p&gt;她猛转过头，眼里是不相信的神色：“真的？”&lt;/p&gt;

&lt;p&gt;我长叹一声：“是啊。谁叫我是罪魁祸首呢。不过说好了，买菜的钱可要你出。”&lt;/p&gt;

&lt;p&gt;窗外阴霾尽散，阳光明媚。方俊扬笑靥如花。我很开心。&lt;/p&gt;

&lt;h1 id=&quot;八&quot;&gt;（八）&lt;/h1&gt;

&lt;p&gt;“外婆外婆，为什么你的耳朵那么长呀？”&lt;/p&gt;

&lt;p&gt;“吃驴肉吃的。”&lt;/p&gt;

&lt;p&gt;“外婆外婆，为什么你的眼睛那么绿呀？”&lt;/p&gt;

&lt;p&gt;“熬夜念参考书念的。”&lt;/p&gt;

&lt;p&gt;“外婆外婆，为什么你的指甲这么尖呀？”&lt;/p&gt;

&lt;p&gt;“方便掏耳朵。”&lt;/p&gt;

&lt;p&gt;“好恶心……”方俊扬笑倒在我怀里。&lt;/p&gt;

&lt;p&gt;我们俩坐在她家客厅的沙发上，百无聊赖正在扮演大灰狼和小红帽。我别的本事不大有，信口胡掰的本事倒是不错。方俊扬其实已经全好了，但我们都不想去上课，干脆再在家混一个下午。&lt;/p&gt;

&lt;p&gt;在茶几底下，我们发现一本不知何年何月的《格林童话》，正好拿来打发时间。&lt;/p&gt;

&lt;p&gt;“你说，会不会有人发现我们俩同时请假不是巧合？”&lt;/p&gt;

&lt;p&gt;“不是说大家都在流感吗……而且只是一个星期而已。”我说。&lt;/p&gt;

&lt;p&gt;“嗯……”她思索了一下：“不管了，让他们说去吧。”她抬起头，一脸笑意，继续扮演她的角色：“外婆外婆，为什么你的牙齿那么尖呀？”&lt;/p&gt;

&lt;p&gt;我轻轻把她按倒在沙发上，奸笑道：“那是为了要吃掉你。”&lt;/p&gt;

&lt;p&gt;“你怎么可以欺负我这个病人……”&lt;/p&gt;

&lt;p&gt;“病人？哼！什么病人，胃口好得像小马一样，今天中午的牛肉面，连我的一份也抢去吃了一半。”&lt;/p&gt;

&lt;p&gt;“你做得好吃嘛。”&lt;/p&gt;

&lt;p&gt;“休得花言巧语！”我牢牢捉住她的手腕，凑近她。&lt;/p&gt;

&lt;p&gt;“你要干吗……”她软弱无力地说，勉强用膝盖顶住我的进攻。我放开她一只手，改而搂住她的腰。她放弃了抵抗。&lt;/p&gt;

&lt;p&gt;“说你喜欢我。”她搂着我的脖子，在我耳边要求道。&lt;/p&gt;

&lt;p&gt;“我喜欢你。”&lt;/p&gt;

&lt;p&gt;“再说一遍。我想听。”&lt;/p&gt;

&lt;p&gt;“我喜欢你。”&lt;/p&gt;

&lt;p&gt;“我也喜欢你。”她捧着我的脸，看着我的眼睛，一个字儿一个字儿地说。然后她几乎是战战兢兢地凑上嘴唇。这个吻好像北极冰盖下的海洋一般深，她似乎要把我的灵魂吸出来。我闭上眼，脑中出现无数纷乱的念头。沙发下的地板在摇摆，整个房间在绕我们急速旋转。&lt;/p&gt;

&lt;p&gt;电话铃骤然响起，我们都吓了一跳。她不好意思地笑笑，推我起来，整理了一下自己的衣服。有一样小小的白色东西从我身上落下，她弯腰把它捡起来。那是一个白色的蝴蝶搭袢，不知何时我把它放在衬衫口袋里的。她稍一迟疑，把它放到一边，然后接起电话。&lt;/p&gt;

&lt;p&gt;电话明显是她父母打来的长途，但我听不出他们交谈些什么。方俊扬只是时不时地“嗯”一下，有时也看看我。电话足足打了有半小时之久，其间我把那本童话百无聊赖地翻了好几遍。 终于她挂了电话，一言不发地走到我身边坐下。&lt;/p&gt;

&lt;p&gt;“怎么了？”我问。&lt;/p&gt;

&lt;p&gt;“没事。”她心不在焉地说：“晚饭吃什么？”&lt;/p&gt;

&lt;p&gt;“现在才两点半那。”&lt;/p&gt;

&lt;p&gt;“哦。那样的话……”她把头埋到我肩窝里，轻吻我的耳朵：“到我房间里去好不好？”&lt;/p&gt;

&lt;p&gt;我们钻在被窝里，一边亲吻一边互相笨手笨脚地脱衣服。她闭着眼睛，双手环着我的脖子，让我轻轻解开她的胸罩。我搂紧她，让她的乳房紧贴我的胸口，然后将手探进她小腹下面，她顺从地蜷起腿，让我脱去她的内裤。她的下体火热而湿润，我爱抚她时，她战栗着紧抱我的身体，在我脖子上留下了深深的咬痕。-&lt;/p&gt;

&lt;p&gt;这是个安静的午后，桌上的老式三五牌台钟发出“喀嚓、喀嚓”的轻响。好像做梦般，时间的尺度消失了。&lt;/p&gt;

&lt;p&gt;“你父母要回来了吗？”我问道。&lt;/p&gt;

&lt;p&gt;“嗯，晚上七点多到。”她闭着眼说。她像只小猫般蜷在我身边，用手指在我身上无意识地拨弄。&lt;/p&gt;

&lt;p&gt;“那我也该走了。被他们看见我就惨了。”&lt;/p&gt;

&lt;p&gt;“是啊。”她格格地笑了：“杀了你也说不定。”&lt;/p&gt;

&lt;p&gt;可是在送我出家门时，忽然间好像崩断了弦似的，她一下子又哭了：“我舍不得你走。”&lt;/p&gt;

&lt;p&gt;“别难过，啊？明天学校里又能见面。”&lt;/p&gt;

&lt;p&gt;“嗯。我知道了……”&lt;/p&gt;

&lt;p&gt;“晚自修再去礼堂，嗯？”&lt;/p&gt;

&lt;p&gt;“去你的吧。”她破涕为笑。&lt;/p&gt;

&lt;p&gt;我看把她逗开心了，才放心回家。天色已暗，街上的树都掉光了叶子，秋天快要结束了。&lt;/p&gt;

&lt;p&gt;晚上外面开始挂大风，没有关好的窗户砰砰直响。我看电视看到十一点多，&lt;/p&gt;

&lt;p&gt;然后准备上床睡觉。 电话铃骤然响起， 我拿起听筒，里面传来方俊扬细细的声音：&lt;/p&gt;

&lt;p&gt;“喂。” 　　&lt;/p&gt;

&lt;p&gt;“是我。” 　　&lt;/p&gt;

&lt;p&gt;“没睡吗？” 　　&lt;/p&gt;

&lt;p&gt;“正要睡哪。”我回答。 　　&lt;/p&gt;

&lt;p&gt;“噢，那……算了吧。”她说。 　　&lt;/p&gt;

&lt;p&gt;“嗯。明天见。”我哈欠连天地道别。 　　&lt;/p&gt;

&lt;p&gt;放下电话的一霎那，我忽然想到，她也许是想问问我有关那个白色小蝴蝶的事。但是……来不及了，我没有她的电话号码。 　　&lt;/p&gt;

&lt;p&gt;我整晚都没睡好，迷迷糊糊总在怀疑电话随时会响，但她再也没有打来。　&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝&lt;/p&gt;

&lt;p&gt;方俊扬给我的信  :&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;江鱼：&lt;/p&gt;

  &lt;p&gt;不知道该怎么说……&lt;/p&gt;

  &lt;p&gt;我的父母决定让我转学去上海了。他们担心我在这里没有人照顾。其实我自己知道，我在这里很好，尤其是有你照顾我的那两天。但我还是决定离开这里。 并不是外来的压力，而是我自己的决定。 我想，我如果继续留在你身边，我的生命迟早会完全变成你的。这件事远远超过了普通的喜欢，每天夜里我自己想起这件事，都感觉我在被你一点一点吞噬掉。&lt;/p&gt;

  &lt;p&gt;我不能怪你。也许是因为一开始就是我先向你表白的。好像一边重一点的天平，一旦倾斜，所有的重量都会滑向一边，再也扳不回来。我陷入得越深，就越喜欢你，越喜欢你，就陷入的越深。我为你哪怕一点点的表示而欣喜若狂，不想去深究那表示后面的原因。 　&lt;/p&gt;

  &lt;p&gt;你是因为我喜欢你而喜欢我的吗？ 即使你自己问自己， 恐怕也不能得到答案。&lt;/p&gt;

  &lt;p&gt;这真是一件不公平的事，我很生自己的气。我像吸毒成瘾的人，如果没有强大的外力，就不能脱身。如果我多花时间思考，恐怕永远也离不开你。所以，在我捡到那小小白蝴蝶的一瞬间，我做了决定。&lt;/p&gt;

  &lt;p&gt;你喜欢和我做爱吗？我非常喜欢。那是戒毒前的狂欢，是我一辈子的回忆。&lt;/p&gt;

  &lt;p&gt;我在无数次的梦中感到你进入我的身体，被你贯穿，完全地占据。 在离开你之前，我要实现这个梦。&lt;/p&gt;

  &lt;p&gt;我非常爱你。你爱我吗？ 　　　&lt;/p&gt;

  &lt;p&gt;方俊扬&lt;/p&gt;

  &lt;p&gt;九二年十二月十七日&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;寄信人地址不详。&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝ 　　&lt;/p&gt;

&lt;p&gt;我给方俊扬的信:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;方俊扬：&lt;/p&gt;

  &lt;p&gt;你好吗？&lt;/p&gt;

  &lt;p&gt;已经很久了吧。你现在在哪里？在做什么事？&lt;/p&gt;

  &lt;p&gt;这封回信花了我九年时间。在九年里我经常想要回答你的问题。你的离开使我很伤心，但也许你是对的。在那时……我是说，在那时，我并不爱你。我喜欢你的所做所为，几乎是自动般的回应你的爱。 我想，这是人之常情吧。即使现在，我也不会责备自己。 但是，谁又能说清楚，爱是如何产生的呢？不管是因为什么样的原因产生的喜欢，都算是喜欢吧。不管是因为什么原因产生的爱，都是爱吧。有人曾在雨中放风筝，就是为了证明这一点。&lt;/p&gt;

  &lt;p&gt;我已经二十五岁了，抱有这种信仰，究竟算是幼稚还是成熟呢……&lt;/p&gt;

  &lt;p&gt;不管怎样，我并不在乎。偶然，我会在梦中见到你。我站在空中俯瞰一片巨大的草原，你坐在草原中间。草很高，很密，处处开着不知名的花。阳光明媚，我慢慢下降，风卷着粉色的花瓣在身边飞舞。 我想，如果我再见到你，我会爱上你。至于天平究竟偏向哪一边，我已经没有时间去管了。&lt;/p&gt;

  &lt;p&gt;江鱼&lt;/p&gt;

  &lt;p&gt;二○○一年二月十九日&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;收信人地址不详。&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝&lt;/p&gt;

&lt;p&gt;我坐在三万英尺高空的客机上，客舱的扩音器传来机长生硬的英语介绍。我们正在南太平洋某处上空，离目的地还有多少的航程，估计何时到达……等等等等。我戴上耳机，转到音乐频道，耳机中传来《花样年华》的主题曲。&lt;/p&gt;

&lt;p&gt;“电影的主题音乐，伴随着男女主角的邂逅反覆出现。诱人的华尔兹，弦乐的整体处理教人着迷，象征着男女舞蹈员互相试探、浪漫迷人的舞步。舞蹈的节奏，也是两性激情与因循守旧的交缠与冲突的化身。”&lt;/p&gt;

&lt;p&gt;我记起那是唱片上的介绍。　&lt;/p&gt;

&lt;p&gt;在洗手间里洗脸时，飞机遇上了气流，我用力撑住墙壁。镜子中的我，苍白而憔悴，胡子拉碴。我仔细地看自己的脸，在镜子背后，我似乎看到一双深深的黑眼睛。 　　&lt;/p&gt;

&lt;p&gt;方俊扬，你现在在哪里？&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-naive-lover</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-naive-lover</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：为什么俺推荐 Python[5]·作为瑞士军刀的 Python</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;短小精悍&lt;/li&gt;
    &lt;li&gt;功能强大之1——跟非常多的语言整合&lt;/li&gt;
    &lt;li&gt;功能强大之2——既可以跨平台，又可以跟操作系统深度整合&lt;/li&gt;
    &lt;li&gt;功能强大之3——具有很丰富的第三方模块&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;本系列几乎变成年度系列了——上一篇帖子是去年元宵节发的。这几天正值春节假期，赶紧抽空补上本系列新的一篇，免得大伙儿以为本系列“烂尾”了。&lt;/p&gt;

&lt;p&gt;“瑞士军刀”，大伙儿应该很熟悉，俺就不解释了。拿“瑞士军刀”来比喻 Python 就是想说明：Python 不但短小精悍，而且功能强大。今天就来介绍一下 Python 的这两个特点（尤其是后者）。&lt;/p&gt;

&lt;h1 id=&quot;短小精悍&quot;&gt;短小精悍&lt;/h1&gt;

&lt;h2 id=&quot;轻量级的的代码&quot;&gt;轻量级的的代码&lt;/h2&gt;

&lt;p&gt;要吹嘘 Python 的轻量级，首先要吹嘘的，自然是它简洁的代码。为了让大伙儿有个初步的印象，举几个例子。&lt;/p&gt;

&lt;p&gt;举例1&lt;/p&gt;

&lt;p&gt;要得到100-200之间所有奇数的3次方，只需如下一行&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举例2&lt;/p&gt;

&lt;p&gt;如果要把上述结果拼成一个逗号分隔的字符串，还是只要一行&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举例3&lt;/p&gt;

&lt;p&gt;可能有人觉得上面2个例子是小儿科，再来举一个稍微复杂点的。只需一行代码，即可实现网络扫描（用的是第三方的 Scapy 工具）。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# 传统的 ping 扫描，基于 ICMP 协议
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.1.1-254&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 局域网扫描，基于 ARP 协议
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ff:ff:ff:ff:ff:ff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.1.0/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;轻量级的安装环境&quot;&gt;轻量级的安装环境&lt;/h2&gt;

&lt;p&gt;比如 Python 的安装包只有十几兆，而 Java 的 JDK 安装包动辄接近100兆。&lt;/p&gt;

&lt;h2 id=&quot;轻量级的运行环境&quot;&gt;轻量级的运行环境&lt;/h2&gt;

&lt;p&gt;同样是运行一个“Hello World”，用 Python 写的进程，占用的内存会更小（相比大多数其它编程语言）。而且 Python 的运行环境（Python 虚拟机）可以很方便地嵌入到 C/C++ 程序中，只需额外带一个动态库即可。&lt;/p&gt;

&lt;h1 id=&quot;功能强大之1跟非常多的语言整合&quot;&gt;功能强大之1——跟非常多的语言整合&lt;/h1&gt;

&lt;p&gt;很多程序员喜欢“在一棵树上吊死”——始终只用一种编程语言。俺非常反对这种倾向。要想成为一个优秀的程序员，有必要掌握【不同风格/不同范式】的编程语言。编程语言多样化的好处在于，你可以利用不同语言的特色，以取长补短。&lt;/p&gt;

&lt;p&gt;而 Python 在跨语言整合方面，堪称佼佼者——你很难找到哪个语言，能像 Python 这样，跟如此多的语言进行整合。&lt;/p&gt;

&lt;p&gt;下面简单举几个例子：&lt;/p&gt;

&lt;h2 id=&quot;跟-cc-整合&quot;&gt;跟 C/C++ 整合&lt;/h2&gt;

&lt;p&gt;咱们常用的 Python 运行环境也称为 CPython，是用 C 语言写的。所以 Python 天生就具有跟 C/C++ 整合的能力。而且这种整合是双向的——也就是说，既可以在 Python 模块调用 C/C++ 模块，也可以在 C/C++ 模块调用 Python 模块。&lt;/p&gt;

&lt;p&gt;Python 跟 C/C++ 整合，可以有如下三个优点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;丰富的第三方资源&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为 C/C++ 具有非常丰富的第三方模块（包括开源和闭源），其丰富程度超过 Java。所以 Python 可以利用这种整合能力，直接调用各种 C/C++ 的模块，来丰富自己的功能。&lt;/p&gt;

&lt;p&gt;举个例子&lt;/p&gt;

&lt;p&gt;比如 cURL 是一个C语言编写的应用层网络工具，功能非常强。而 Python 可以通过整合 cURL 直接获得 cURL 的强大功能。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;性能的提升&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;除了第三方模块丰富，C/C++ 开发的模块还有一个优点——性能好。所以，Python 整合了 C/C++ 模块之后，还能趁机获得性能提升。&lt;/p&gt;

&lt;p&gt;举个例子&lt;/p&gt;

&lt;p&gt;比方说你要写一个 3D 游戏，其中的 3D 渲染引擎是性能瓶颈。那么你可以用 Python 整合一个 C/C++ 的 3D 渲染引擎。而 Python 只用来实现跟游戏高层应用逻辑相关的部分。这样可以一举两得：性能不差，代码不多。&lt;/p&gt;

&lt;p&gt;顺便说一下：如今有不少游戏都走这个开发思路——底层引擎用【重型的】C 或 C++ 实现，以确保高性能；而高层的业务逻辑则用【轻型的】脚本语言来开发。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;跟操作系统整合&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;地球上的操作系统，只要是有点名气的，内核都是 C 语言写的；除了操作系统内核，大部分操作系统的运行库也都是 C/C++ 编写的。所以，Python 跟 C/C++ 整合，可以带来第三个好处——跟操作系统的整合。关于这点，待会儿俺还会专门聊。&lt;/p&gt;

&lt;h2 id=&quot;跟-jvmjava-整合&quot;&gt;跟 JVM（Java） 整合&lt;/h2&gt;

&lt;p&gt;通过 Jython 这个开源项目，Python 可以无缝整合到 JVM 环境中。如此一来，Python 能直接调用所有 JVM 标准库（比如 JDBC）和第三方库（比如 Lucene），还可以跟各种 JVM 语言（比如“Java、Scale、Groovy”等）进行互操作。&lt;/p&gt;

&lt;h2 id=&quot;跟-dotnet-整合&quot;&gt;跟 dotNet 整合&lt;/h2&gt;

&lt;p&gt;通过 IronPython 这个开源项目，Python 可以无缝整合到 dotNet 环境中。如此一来，Python 能直接调用所有 dotNet 的标准库（比如 ADO.NET）和第三方库，还可以跟各种 dotNet 语言（比如“C#、F#”等）进行互操作。&lt;/p&gt;

&lt;p&gt;顺便说一下：Jython 跟 IronPython 貌似同一个作者，牛人啊！&lt;/p&gt;

&lt;h1 id=&quot;功能强大之2既可以跨平台又可以跟操作系统深度整合&quot;&gt;功能强大之2——既可以跨平台，又可以跟操作系统深度整合&lt;/h1&gt;

&lt;h2 id=&quot;python-语言如何体现跨平台性&quot;&gt;Python 语言如何体现“跨平台性”？&lt;/h2&gt;

&lt;p&gt;说到跨平台这个话题，俺给编程语言分一下类：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;可以跨平台，但无法跟操作系统深度耦合（比如 JavaScript、PHP）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以跟操作系统深度耦合，但无法跨平台（比如 VB、VBScript）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;既可以跨平台，又可以跟操作系统深度耦合（比如 C C++ Python）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为啥第三类语言能做到两者兼得？因为这类语言把选择权留给了程序猿——&lt;/p&gt;

&lt;p&gt;一方面，如果程序猿遵循跨平台的开发规范，那么写出来的代码就是跨平台的；&lt;/p&gt;

&lt;p&gt;另一方面，程序猿也可以写出跟系统耦合很紧密的代码——这样的代码虽然不能跨平台，但可以发挥特定平台的强项。&lt;/p&gt;

&lt;p&gt;显然俺喜欢第三类编程语言，因为这类语言给了程序猿自由。&lt;/p&gt;

&lt;h2 id=&quot;python-语言如何与操作系统深度整合&quot;&gt;Python 语言如何“与操作系统深度整合”？&lt;/h2&gt;

&lt;p&gt;Python 的跨平台特性，懂 Python 的同学估计都晓得了。所以俺单独说一下 Python 如何跟操作系统深度整合。为了照顾到大多数人，俺拿 Windows 来说事儿。&lt;/p&gt;

&lt;p&gt;在 Python 社区有一个很有名气的库，叫做 PyWin32。通过这个库，可以让 Python 代码很容易地调用 Windows 的 API 以及 COM 组件。&lt;/p&gt;

&lt;p&gt;比方说，可以用 Python 代码直接操作 Windows 注册表&lt;/p&gt;

&lt;p&gt;比方说，可以用 Python 代码直接读写 Windows 的系统日志&lt;/p&gt;

&lt;p&gt;比方说，可以用 Python 代码直接操作某个窗口句柄&lt;/p&gt;

&lt;p&gt;比方说，可以利用 COM 组件，直接调用 Word 来处理 doc 格式的文档&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;h1 id=&quot;功能强大之3具有很丰富的第三方模块&quot;&gt;功能强大之3——具有很丰富的第三方模块&lt;/h1&gt;

&lt;p&gt;最后一个方面，也是最重要的一个方面，就是 Python 社区具有非常非常丰富的资源（第三方库），而且几乎都是开源的。形形色色的编程领域几乎都可以看到 Python 的身影。&lt;/p&gt;

&lt;p&gt;为了让众多程序员读者领略 Python 的丰富资源，俺特地整理了一个 wiki 页面（请用鼠标猛击“这里”），放上 Python 在各个编程领域的常用模块。为了显示出 Python 代码的简洁，某些模块还放上示例代码。&lt;/p&gt;

&lt;p&gt;最后感叹一下：&lt;/p&gt;

&lt;p&gt;写这篇博文只花了不到一小时，而整理这个 wiki 页面累计超过10个小时。不过这时间没白花——整理的时候顺便对某些领域有了更多的了解。这也就是写博客的好处，既可以帮助别人，又可以帮助自己。&lt;/p&gt;

&lt;p&gt;大伙儿如果觉得俺整理的清单有遗漏，欢迎到本页面留言补充。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-0-overview&quot;&gt;回到本系列的目录&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;本博客&lt;label for=&quot;reference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;reference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;指编程随想的博客 &lt;/span&gt;所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址：&lt;br /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://program-think.blogspot.com/2013/02/why-choose-python-5-tools.html&quot;&gt;https://program-think.blogspot.com/2013/02/why-choose-python-5-tools.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-why-choose-python-5-tool</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-why-choose-python-5-tool</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：为什么俺推荐 Python[4]·作为函数式编程语言的 Python</title>
        <description>&lt;h3 id=&quot;文章目录&quot;&gt;文章目录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;什么是函数式编程&lt;/li&gt;
  &lt;li&gt;FP 的特点&lt;/li&gt;
  &lt;li&gt;FP 的优点&lt;/li&gt;
  &lt;li&gt;Python 的函数语法&lt;/li&gt;
  &lt;li&gt;和 FP 相关的内置函数&lt;/li&gt;
  &lt;li&gt;消除控制流&lt;/li&gt;
  &lt;li&gt;List Comprehension&lt;/li&gt;
  &lt;li&gt;闭包&lt;/li&gt;
  &lt;li&gt;结尾&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;春节前看到热心读者留言，提醒俺：Python 系列好久没更新了（不知不觉又过了一年多）。俺当时回复说：春节假期补上后一篇。昨天听到鞭炮声才发觉元宵已经到了，赶忙写出本文。&lt;/p&gt;

&lt;p&gt;前一个帖子介绍了 Python 作为“面向对象编程”（以下简称 OOP）语言的特点，今天来聊一聊 Python 作为“函数式编程”（以下简称 FP）语言的特点。考虑到本系列面向的是 Python 的门外汉或刚入门的新手，故本文仅介绍若干浅显的 FP 特性。&lt;/p&gt;

&lt;h1 id=&quot;什么是函数式编程&quot;&gt;什么是函数式编程&lt;/h1&gt;

&lt;p&gt;说实话，“函数式编程语言”是一个很大的话题。由于篇幅有限，本文不可能对这个话题做全面介绍。俺干脆偷一下懒，只简单说说。&lt;/p&gt;

&lt;p&gt;从字面上看，所谓的函数式编程，就是以“函数”为中心的“编程范式”。估计有同学又会问了，啥是“编程范式”捏？哎呦，这又是一个很大的话题。通俗来讲，“编程范式”就是指编程的套路。比方说大家很熟悉的 OOP，就是一种“编程范式”。FP 跟 OOP 一样，都是一种编程的套路。做个简单类比：OOP 以“对象/类”作为程序设计的核心，而 FP 以“函数”作为程序设计的核心。&lt;/p&gt;

&lt;h1 id=&quot;fp的特点&quot;&gt;FP的特点&lt;/h1&gt;

&lt;p&gt;既然说到 FP，自然要稍微说一下 FP 的特色。&lt;/p&gt;

&lt;h2 id=&quot;函数很牛x&quot;&gt;函数很牛X&lt;/h2&gt;

&lt;p&gt;刚才说了，FP 是以函数为中心。既然如此，在支持 FP 的语言中，函数的功能自然十分牛X。通俗地说，OOP 语言中，类/对象能干的事情，FP 语言中的函数也能干。下面做一些对比，以加深大伙儿的印象。&lt;/p&gt;

&lt;p&gt;OOP 中，对象可以互相赋值；FP 中，函数可以互相赋值。&lt;/p&gt;

&lt;p&gt;OOP 中，对象可以作为函数的参数/返回值，FP 中，函数可以作为函数的参数/返回值。&lt;/p&gt;

&lt;p&gt;某些 OOP 中，类可以嵌套定义；FP 中，函数可以嵌套定义。&lt;/p&gt;

&lt;p&gt;某些 OOP 中，可以有匿名类；FP 中，可以有匿名函数。&lt;/p&gt;

&lt;h2 id=&quot;避免副作用&quot;&gt;避免副作用&lt;/h2&gt;

&lt;p&gt;在 FP 中，特别强调函数不要有“副作用”（洋文叫“side effect”）。没有副作用的函数，又称之为纯函数（pure function）。其输出完全依赖于输入。换句话说，只要输入一样，输出就一样。&lt;/p&gt;

&lt;p&gt;要成为纯函数，函数内部不能读写函数外部变量、不能有设备 I/O（比如读写文件）……&lt;/p&gt;

&lt;p&gt;无副作用是 FP 的重要特性。FP的很多优点来自于此特性。&lt;/p&gt;

&lt;h2 id=&quot;避免控制流&quot;&gt;避免控制流&lt;/h2&gt;

&lt;p&gt;在 FP 中，尽量避免用控制流语句（循环语句、判断语句）。对于控制流语句，FP 有另外的替代方式。比如：常用递归或高阶函数来替代循环。如此一来，FP 的代码会显得更简洁，更可读。&lt;/p&gt;

&lt;h2 id=&quot;多态&quot;&gt;多态&lt;/h2&gt;

&lt;p&gt;大部分支持 FP 的语言，也都支持多态。函数参数支持多态化，便可实现非常灵活的功能。&lt;/p&gt;

&lt;p&gt;说了这么多，不知道大伙儿明白了没？还是没整明白的同学，请看维基百科的英文词条（中文词条太简单，看不明白滴）。&lt;/p&gt;

&lt;p&gt;洋文实在看不下去吗？那不妨看看 IT 大牛 Joel 写的《你的编程语言能这样做吗？》（中文版在“这里”）。此文以 JavaScript 来阐述 FP 的妙处。&lt;/p&gt;

&lt;h1 id=&quot;fp-的优点&quot;&gt;FP 的优点&lt;/h1&gt;

&lt;p&gt;再稍微说一下 FP 的好处，以强化大伙儿学习的动力。&lt;/p&gt;

&lt;h2 id=&quot;模块化&quot;&gt;模块化&lt;/h2&gt;

&lt;p&gt;在 FP 的思想中，函数最好是“纯”的，而且最好只完成“单一”的任务。在这种指导思想下，函数的模块化程度自然就高。&lt;/p&gt;

&lt;h2 id=&quot;可复用性&quot;&gt;可复用性&lt;/h2&gt;

&lt;p&gt;模块化程度高，直接的好处就是可复用性好。&lt;/p&gt;

&lt;h2 id=&quot;可读性&quot;&gt;可读性&lt;/h2&gt;

&lt;p&gt;刚才说了，FP 的思想强调函数又纯又小。这样的函数，代码的可读性自然好，修改起来也方便。&lt;/p&gt;

&lt;h2 id=&quot;易于调试&quot;&gt;易于调试&lt;/h2&gt;

&lt;p&gt;前面提到了纯函数。如果你的程序中大部分函数都是纯函数，则调试 Bug 会容易很多。像 OOP 中，类的多个成员函数都可以修改类的成员变量，有时候会导致调试极其困难。而纯函数没有此问题。&lt;/p&gt;

&lt;p&gt;另外，多线程是调试的一大噩梦。当年俺还专门写过帖子，介绍 C++ 多线程的注意事项（在“这里”）。而纯函数由于没有副作用，不必担心各种“互斥”、“死锁”等问题。&lt;/p&gt;

&lt;h2 id=&quot;易于测试&quot;&gt;易于测试&lt;/h2&gt;

&lt;p&gt;除了易于调试，纯函数的输出仅仅依赖于输入，这一特点注定了它很容易进行单元测试。&lt;/p&gt;

&lt;h2 id=&quot;适合并行&quot;&gt;适合并行&lt;/h2&gt;

&lt;p&gt;在 FP 中，由于纯函数无副作用，很适合编写并行处理的代码。最典型并且在工业界获得巨大成功的例子就是 Erlang。&lt;/p&gt;

&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;

&lt;p&gt;当然啦，FP 的好处远不止上述这些（比如还有：利于形式化证明）。限于篇幅，俺就不展开了。&lt;/p&gt;

&lt;h1 id=&quot;python-的函数语法&quot;&gt;Python 的函数语法&lt;/h1&gt;

&lt;p&gt;Python 中，常见的函数定义和函数调用，想必各位都晓得了。下面说几种不太常见的，且跟 FP 有关的语法。&lt;/p&gt;

&lt;h2 id=&quot;函数赋值&quot;&gt;函数赋值&lt;/h2&gt;

&lt;p&gt;Python 可以把函数直接赋值给一个变量。举例如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 这是一个计算平方的小函数，后面会反复用它举例
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此处赋值给变量 f
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此处返回100。注意：对该变量使用小括号，等同于调用函数
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;匿名定义&quot;&gt;匿名定义&lt;/h2&gt;

&lt;p&gt;Python 可以用 lambda 关键字定义【单行】的匿名函数。套用刚才的例子&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 定义一个单参数的匿名函数，并把该函数赋值给变量
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此处返回 100
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;嵌套定义&quot;&gt;嵌套定义&lt;/h2&gt;

&lt;p&gt;Python 支持函数的嵌套定义（请看如下例子）。这种语法，在“闭包”中经常出现（后面会具体介绍“闭包”）。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 外层函数
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 内层函数
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此处引用的是外层作用域的变量
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 输出 hello
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 输出 world
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;和-fp-相关的内置函数&quot;&gt;和 FP 相关的内置函数&lt;/h1&gt;

&lt;p&gt;Python 内置了一大坨用于 FP 的函数，以方便程序猿写出简洁的代码。在接下去聊之前，俺有必要先介绍其中的2个。&lt;/p&gt;

&lt;h2 id=&quot;mapfunc-iter&quot;&gt;map(func, iter)&lt;/h2&gt;

&lt;p&gt;为了省事，俺只介绍2参数的 map（正宗的 map 支持 N 参数）。&lt;/p&gt;

&lt;p&gt;参数 func 是个函数，参数 iter 是个迭代器（也可以理解为集合）&lt;/p&gt;

&lt;p&gt;map() 会把 iter 的每个元素传给 func，并把每次调用的结果保存到一个 list 中，然后返回此 list。&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;p&gt;挨个计算整数 list 的平方：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 返回 [1, 4, 9]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;filterfunc-iter&quot;&gt;filter(func, iter)&lt;/h2&gt;

&lt;p&gt;参数含义同 map&lt;/p&gt;

&lt;p&gt;filter() 会把 iter 的每个元素传给 func，如果 func 返回结果为 True，就把元素保存在一个 list 中，最后返回此 list。&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;p&gt;要过滤出所有奇数，代码如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 返回[1, 3]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此处可以用上 lambda，把代码简化为一行：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;消除控制流&quot;&gt;消除控制流&lt;/h1&gt;

&lt;p&gt;为了让大伙儿更深刻体会 FP 风格同传统风格的差别，俺把刚才两个例子组合一下——要求返回整数list 中所有奇数的平方。&lt;/p&gt;

&lt;p&gt;传统的写法（有控制流）：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_lst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_lst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_lst&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FP 的写法（无控制流）：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;怎么样？是不是更简洁？连 for / if 这两个关键字都不需要了。&lt;/p&gt;

&lt;h1 id=&quot;list-comprehension&quot;&gt;List Comprehension&lt;/h1&gt;

&lt;p&gt;这个洋文比较难翻译。有人叫做“列表推导”，也有人称为“列表展开”或“列表解析”。（俺比较喜欢头一个翻译——不禁让人联想到“推倒”:）&lt;/p&gt;

&lt;p&gt;在 Python 中，这是一个很好吃的语法糖——可以让你写出很简洁、很优雅的代码。&lt;/p&gt;

&lt;p&gt;举例1：&lt;/p&gt;

&lt;p&gt;还拿刚才过滤奇数的例子。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述写法可以等价替换为列表推导：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举例2：
　　
再来一个稍微复杂的例子。假设有两个整数 list，分别存储矩形的宽度和高度。现在想把所有的宽度和高度进行两两组合，把大于 10 的面积打印出来。
　　
传统的写法（2层循环，4行代码）&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FP 的写法（无循环，1行代码，多精致啊）&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除了列表推导，Python 中还有字典推导、集合推导等等。为了省点口水，暂且打住。&lt;/p&gt;

&lt;h1 id=&quot;闭包&quot;&gt;闭包&lt;/h1&gt;

&lt;p&gt;闭包，洋文叫“closure”，解释在“这里”。它是 FP 的常见手法。那闭包到底有啥用捏？俺举一个微积分中，函数求导的例子。（不懂微积分或者对高数有心理阴影的同学，别担心，请把注意力集中在代码上）&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.000001&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 表示无穷小的Δx
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 计算斜率。注意，此处引用了外层作用域的变量 f
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此处用函数作为返回值（也就是函数 f 的导数）
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，假设要计算二次函数 f(x) = x2 + x + 1 的导数，只需如下代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 先把二次函数用代码表达出来
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 这个f1 就是 f 的一阶导数啦。注意，导数依然是个函数
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了一阶导数，就可以很容易地计算该函数在某点的斜率&lt;/p&gt;

&lt;p&gt;比如要计算 x=3 的斜率，只需：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要想得到二阶导数（导数的导数），只需依样画葫芦（瞧这代码写得多优雅）&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看到这里，大伙儿不妨设想一下：如果不用 FP，改用 OOP，上述需求该如何实现？俺觉得吧，用 OOP 来求导，这代码写起来多半是又丑又臭。&lt;/p&gt;

&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;/h1&gt;

&lt;p&gt;今天聊了不少 FP 的语法特性，可惜还是没聊完。由于俺比较懒，而且怕写得太长没人看，所以一些高级话题（比如：迭代器、生成器、等），今天就不介绍了。假如列位看官对那些玩意儿感兴趣，再抽空单独写一帖。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-0-overview&quot;&gt;回到本系列的目录&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt;&lt;br /&gt;
本博客&lt;label for=&quot;reference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;reference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;指编程随想的博客 &lt;/span&gt;所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址：&lt;br /&gt;
&lt;a href=&quot;https://program-think.blogspot.com/2012/02/why-choose-python-4-fp.html&quot;&gt;https://program-think.blogspot.com/2012/02/why-choose-python-4-fp.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-why-choose-python-4-fp</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-why-choose-python-4-fp</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：为什么俺推荐 Python[3]·作为面向对象语言的 Python</title>
        <description>&lt;h3 id=&quot;文章目录&quot;&gt;文章目录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#abstract&quot;&gt;抽象（Abstraction）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#encap&quot;&gt;封装（Encapsulation）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#inherit&quot;&gt;继承（Inheritance）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#poly&quot;&gt;多态（Polymorphism）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;结尾&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本系列已经中断了很长时间 :( 直到最近一个读者来信问俺，为啥不继续写，俺才突然想起这个被遗忘的系列，实在是抱歉！前一个帖子介绍了作为动态语言的 Python，今天来聊一聊 Python 在面向对象编程（OOP）方面的特色。&lt;/p&gt;

&lt;p&gt;本文主要针对那些熟悉 OOP，但还不熟悉 Python 的同学。为了让大伙儿有一个直观的认识，俺会拿 C++/Java 来进行语法上的对比。（这俩语言的名气够大，且号称支持 OO，也算有些可比性）&lt;/p&gt;

&lt;p&gt;强调一下：本文虽然拿了某些语言来作对比，但丝毫没有贬低这些语言的意思，请这些语言的粉丝们，不要对号入座 :)&lt;/p&gt;

&lt;h1 id=&quot;抽象abstraction&quot;&gt;抽象（Abstraction）&lt;a name=&quot;abstract&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;但凡介绍 OOP，自然会提到抽象。因为抽象，是 OO 的第一要素，也是其它要素的基础。而提到抽象，又不免提到对象（Object）。所以，俺首先来聊一下，Python 语言是如何体现“对象”这个思想的。&lt;/p&gt;

&lt;h2 id=&quot;python的对象&quot;&gt;Python的对象&lt;/h2&gt;

&lt;p&gt;如果要问俺，什么是 Python 中的对象，还真不好下一个严密又通俗易懂的定义。为了敷衍大伙儿，俺只好用一句话来概括，那就是 Python 语言中，【一切皆对象】。这句话该如何理解捏？简单来说，就是你在 Python 语言中涉及到的各种东东，都是“对象”。比如，函数是对象、各种数值（比如整数值、浮点数值、布尔值）是对象、模块（类似于 Java 的 package）是对象、None（类似于 Java 的空引用 null、C++ 的空指针 NULL）也是对象、甚至连类（class）也是对象……&lt;/p&gt;

&lt;p&gt;对比一下 C++ 和 Java 的语法：只有【类的实例】才能算得上是对象。这2个语言的基本类型（比如“int、char、float”等）不是对象，至于函数，就更算不上了。&lt;/p&gt;

&lt;p&gt;既然是一切皆对象，俺有必要稍微总结一下，Python 对象的共性，否则初学 Python 的同学还是会一头雾水。&lt;/p&gt;

&lt;h2 id=&quot;对象的属性&quot;&gt;对象的属性&lt;/h2&gt;

&lt;p&gt;首先，所有的 Python 的对象，都具有若干个属性。你可以通过内置的 dir() 函数进行反射，从而了解到某个对象分别都包含哪些属性。熟悉 Java 的同学，应该明白啥是“反射”。光懂 C/C++ 的同学，如果理解上有困难，可以先参考“维基百科的解释”。&lt;/p&gt;

&lt;p&gt;另外，Python 还提供了若干内置的函数，用于在【运行时】操作指定对象的属性。具体如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#判断obj对象是否具有名为name的属性
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;setattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#设置obj对象的名为name的属性值为value
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#获取obj对象的名为name的属性值
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;delattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#删除obj对象的名为name的属性
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;对象的类型&quot;&gt;对象的类型&lt;/h2&gt;

&lt;p&gt;所有的 Python 对象，都可以通过内置的 type() 函数获取该对象的类型。这实际上就是 Python 的 RTTI 机制的体现。懂 C++ 的同学，可以回忆一下 C++ 的 typeid 关键字；懂 Java 的同学，可以想一想 Java 的 instanceof 关键字。&lt;/p&gt;

&lt;h2 id=&quot;对象的标示&quot;&gt;对象的标示&lt;/h2&gt;

&lt;p&gt;所有的 Python 对象，都可以通过内置的 id() 函数获取该对象的【唯一】标示。而且当一个对象创建之后，这个唯一标示就会始终保持不变。对于学过 C/C++ 的同学，不妨把这个“唯一标示”想象成该对象在内存的地址。这或许有助于你的理解 :)&lt;/p&gt;

&lt;p&gt;Python 对象还有其它一些共性，考虑到本文的扫盲性质，就不再费口水了。有兴趣的同学，可以自己找些入门书研读一番。&lt;/p&gt;

&lt;h2 id=&quot;一切皆对象的好处&quot;&gt;【一切皆对象】的好处？&lt;/h2&gt;

&lt;p&gt;可能有同学会问，“一切皆对象”有啥好处捏？俺窃以为：当一切皆为对象，就可以把很多概念、操作、惯用手法统一起来，在语法层面体现出美感。&lt;/p&gt;

&lt;p&gt;下面俺举几个例子，并拿 Java 来对比一下。&lt;/p&gt;

&lt;p&gt;在 Java 里面，由于基本类型不是继承自 Object 类，引出不少麻烦。当初 Java 它爹刚开始设计容器类（比如 Vector、ArrayList …）的时候，颇费了一番功夫。因为容器里面放置的东东必须是 Object，为了让容器能适应基本类型，只好给每一种基本类型分别对应一个派生自 Object 的包装类（Integer 类对应 int、Float 类对应 float …）；后来又平添了自动装箱/拆箱的概念；搞来稿去，产生了 N 多复杂性。&lt;/p&gt;

&lt;p&gt;而 Python 就没有这方面的困扰。&lt;/p&gt;

&lt;p&gt;再拿刚才提及的“反射”来说事儿。虽然 Java 语言支持对象的反射，但是 Java 的 package 不是 Object，所以也就无法对 package 进行反射。反观 Python，任何一个 module（相当于 Java 的 package）import 之后，都可以直接通过前面提到的 dir() 函数进行反射，得知该 module 包含了哪些东东。仅仅需要2行代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xxx&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;封装encapsulation&quot;&gt;封装（Encapsulation）&lt;a name=&quot;encap&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;为了避免歧义，首先要明确一下：什么是“封装”？为了叙述方便，俺把【OOP 的封装】，分为“狭义”和“广义”两种。（关于“封装”的深入讨论，可以参见“另一篇博文”）&lt;/p&gt;

&lt;h2 id=&quot;广义封装&quot;&gt;广义封装&lt;/h2&gt;

&lt;p&gt;OOP 很强调以数据为中心。所以 OOP 的广义封装，就是把数据和操作数据的行为，打包到一起。比如 C++/Java 里的 class，可以同时包含数据成员和函数成员，就算是满足“广义的封装”了。对于 Python 而言，其 class 关键字类似于 C++ 和 Java，也已经具有“广义的封装性”了。&lt;/p&gt;

&lt;h2 id=&quot;狭义封装&quot;&gt;狭义封装&lt;/h2&gt;

&lt;p&gt;而 OOP 的狭义封装，则更进一步，增加了信息隐藏（Information Hiding）。比如 C++ 和 Java 的“public、protected、private”等关键字，就是通过访问控制来达到信息隐藏的效果。Python 虽然没有针对访问控制的关键字来修饰类成员，但是 Python 采用了另外一套机制——根据命名来约定。在 Python 的对象中，如果某个属性以双下划线开头来命名（比如 __name），就能起到类似于 C++/Java 的 private 关键字的效果。&lt;/p&gt;

&lt;h2 id=&quot;对访问控制的偏见&quot;&gt;对访问控制的偏见&lt;/h2&gt;

&lt;p&gt;俺曾经在某技术论坛看到有人质疑 Python 的访问控制机制，说 Python 的私有属性，可以通过反射机制绕过，因此形同虚设。在此，俺想举 C++ 和 Java 来进行反驳。&lt;/p&gt;

&lt;p&gt;在 Java 中，同样可以通过反射机制，来访问类的私有成员。至于 C++，得益于指针的强大，只要能访问某个对象（的 this 指针），通过计算该对象成员变量在内存中的偏移，一样可轻易对私有成员变量进行读写。虽然这么干挺变态滴，但技术上是可行滴。&lt;/p&gt;

&lt;h1 id=&quot;继承inheritance&quot;&gt;继承（Inheritance）&lt;a name=&quot;inherit&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;紧接着，咱再来说一下继承的话题。&lt;/p&gt;

&lt;h2 id=&quot;python-的继承&quot;&gt;Python 的继承&lt;/h2&gt;

&lt;p&gt;Python 没有像 Java 那样，区分出“类继承”（OO 的术语中也叫“实现继承”）和“接口继承”；也没有像 C++ 那样，区分出“公有继承、私有继承、保护继承”这么花哨的玩意儿。Python 就只有一种继承方式。&lt;/p&gt;

&lt;h2 id=&quot;继承的语法&quot;&gt;继承的语法&lt;/h2&gt;

&lt;p&gt;Python 的继承语法，相比 C++/Java 而言，更加简洁。比如子类 Child 需要继承父类 Parent，代码只需如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# xxxx
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是多继承，代码大同小异：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parent1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parent2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parent3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# xxxx
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假如你想知道某个类有哪些父类（基类），只需要通过 Child.&lt;strong&gt;bases&lt;/strong&gt; 便可知晓。&lt;/p&gt;

&lt;h2 id=&quot;继承的动态性&quot;&gt;继承的动态性&lt;/h2&gt;

&lt;p&gt;其实上一个帖子已经介绍了动态改变继承关系的例子。但是考虑到上一个帖子年代久远（距本文将近1年），想必很多同学没看过或者看过又忘了。俺不妨再啰嗦一下：作为一种动态语言，Python 可以在【运行时】修改类的继承关系。这个特性比较酷，是 C++/Java 所望尘莫及滴。请看下面的例子：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;child&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bases__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bases__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parent1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parent2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 动态追加了2个父类
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bases__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此处打印出的父类信息中，已经包含 Parent1、Parent2
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;多态polymorphism&quot;&gt;多态（Polymorphism）&lt;a name=&quot;poly&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;至于 Python 的多态，和传统的 OO 语言差不多，似乎没有太多值得说道的地方。俺简单举个代码作例子。为了省打字，直接复用上述的3个类，并增加一个 test() 函数如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后对 test() 函数分别传入不同的类型的对象，输出结果俺就无需多说了吧？&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 打印出 child
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parent1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 打印出 parent1
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;今天的话题，主要是让不熟悉 Python 的网友，对 Python 在面向对象方面的特性，有一个粗浅、感性的认识。聊完了 OOP，下一个帖子会聊一下关于 FP（函数式编程）的话题。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-0-overview&quot;&gt;回到本系列的目录&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt; &lt;br /&gt;
本博客&lt;label for=&quot;reference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;reference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;指编程随想的博客 &lt;/span&gt;所有的原创文章，原作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址: &lt;br /&gt;
&lt;a href=&quot;https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html&quot;&gt;https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-why-choose-python-3-oop</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-why-choose-python-3-oop</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：为什么俺推荐 Python[2]·作为动态语言的 Python</title>
        <description>&lt;h3 id=&quot;文章目录&quot;&gt;文章目录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;动态语言扫盲&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whyDynamic&quot;&gt;为啥要学习动态语言？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whyPython&quot;&gt;为什么是 Python？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上一篇帖子介绍了脚本语言的优缺点，然后又拿 Python 和其它脚本语言PK了一下。今天主要是忽悠一下动态语言，捎带忽悠一下 Python。如果你看完本贴，觉得动态语言不错，那俺建议你从 Python 开始入手。&lt;/p&gt;

&lt;h1 id=&quot;动态语言扫盲&quot;&gt;动态语言扫盲&lt;a name=&quot;overview&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;考虑到还有很多同学对动态语言了解不深入，有必要先来普及一下它的基本常识。已经了解的同学，请略过本节。&lt;/p&gt;

&lt;p&gt;通俗地说：能够在运行时修改自身程序结构的语言，就属于动态语言。那怎样才算是“运行时修改自身程序结构”捏？比如下面这几个例子都 算：在【运行时】给某个类增加成员函数及成员变量；在【运行时】改变某个类的父类；在【运行时】创建出某个函数……&lt;/p&gt;

&lt;p&gt;从这些例子，你应该对动态语言有一个初步的感觉了吧？毕竟传统的静态语言（比如C、C++、Java），是很难达到这些效果滴。&lt;/p&gt;

&lt;p&gt;另外，有个误区需要澄清一下。很多同学以为脚本语言也就是动态语言。其实两者是不等价滴——虽然两者有很大的交集。比如 C# 在4.0之后，就可以算是动态语言了，但它不能算是脚本语言；另外，有很多 Shell 脚本语言（比如 DOS &amp;amp; Windows 下的 bat），不能算是动态语言。&lt;/p&gt;

&lt;p&gt;关于动态语言更深入的介绍，大伙儿可以看“这里”。&lt;/p&gt;

&lt;h1 id=&quot;为啥要学习动态语言&quot;&gt;为啥要学习动态语言？&lt;a name=&quot;whyDynamic&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;扫盲之后，就该来说一下，学习动态语言的动机了。搞明白动机，学起来才有干劲嘛 :-)&lt;/p&gt;

&lt;h2 id=&quot;顺应大趋势&quot;&gt;顺应大趋势&lt;/h2&gt;

&lt;p&gt;假如你经常关注 TIOBE 的排名，那你应该能察觉出来，动态语言近两年的发展势头比较迅猛（在 Top10 里面，至少占了半壁江山）。这能从某个侧面反映出动态语言的影响力在扩大。&lt;/p&gt;

&lt;p&gt;假使你不相信 TIOBE 的排名，俺再举一个例子。两大开发阵营（Java 和 dotNet）最近几年也加大了对动态语言的支持力度。比如，dotNet 的 CLR 加入了对IronPython 和 IronRuby 的支持；Sun 当然也不甘示弱，JVM 也开始支持 Groovy，JRuby 等语言。&lt;/p&gt;

&lt;p&gt;俺费了这许多口水，列位看官应该明白动态语言是大势所趋吧。在这动态语言大行其道的日子里，你如果连一门动态语言都没搞懂，那出门都不好意思跟人打招呼。&lt;/p&gt;

&lt;p&gt;不过，话又说回来，静态语言也是不会消亡滴。毕竟，静态语言有自己的优势（比如严谨、性能）。长期来说，必定是动态语言和静态语言并存。各自弥补对方的缺点。&lt;/p&gt;

&lt;h2 id=&quot;了解新思维新理念&quot;&gt;了解新思维、新理念&lt;/h2&gt;

&lt;p&gt;学习一门动态语言还有一个好处：有很多时候，多学习一门语言，并不一定是为了在工作中用它，而是为了学习新的思维方式、体会新的理念。比如俺就曾经花时间去看 Prolog，但是俺在工作中，从来不需要用到它。（以后有空的话，俺会介绍一下这玩意儿）&lt;/p&gt;

&lt;p&gt;由于动态语言可以在运行时修改自身结构，因此就会产生很多静态语言所没有编程范式和手法（比如 eval、Mixin）。如果你以前只使用静态语言，那你在学习了动态语言之后，多半会从它身上领略到很多新的思想和理念。&lt;/p&gt;

&lt;p&gt;（关于 eval 的招数，俺后来写了一篇《再举几个动态语言 eval 手法的例子》）&lt;/p&gt;

&lt;h2 id=&quot;能够化繁为简&quot;&gt;能够化繁为简&lt;/h2&gt;

&lt;p&gt;可能有些同学觉得，前面说的都有些务虚，那咱再来说点具体实在的。大牛 Edsger Dijkstra（图灵奖得主）曾经说过：编程的艺术就是处理复杂性的艺术。咱们来看看，动态语言是如何处理复杂问题滴。&lt;/p&gt;

&lt;p&gt;假设要你实现一个函数，用来完成两个数的“某种运算”，具体的运算类型作为函数的参数传入，然后该函数返回运算结果。比如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 返回 6
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 返回 15
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于上述需求，你会如何实现捏？&lt;/p&gt;

&lt;p&gt;请先暗自盘算一柱香的功夫，然后再往下看。&lt;/p&gt;

&lt;p&gt;．．．．．．&lt;/p&gt;

&lt;p&gt;Ｔｈｉｎｋｉｎｇ&lt;/p&gt;

&lt;p&gt;．．．．．．&lt;/p&gt;

&lt;p&gt;如果你用静态语言（比如 C、C++、Java）来实现，你可能会在函数内使用一个 switch，根据不同的运算符，进行计算，然后返回计算结果。&lt;/p&gt;

&lt;p&gt;对于某些比较 ＯＯ 的语言（例如 C++、Java），你或许还会抽象出一个运算的接口类（纯虚类），然后分别派生出若干个不同的计算类（比如加法类、乘法类），看起来似乎比 switch 要优雅一些。&lt;/p&gt;

&lt;p&gt;当然，用静态语言还有其它一些玩法，但是代码量都不会少。具体详情可以看很早以前的一个老故事：《4个程序员的一天》。（其实俺这个例子的灵感就是从那个老故事剽窃滴）&lt;/p&gt;

&lt;p&gt;现在，咱们来看看 Python 是如何【优雅地】实现该需求滴。用 Python 只需要【两行代码】即可。请看：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不懂 Python 的同学可能要问了，这两行代码是啥子意思呀？&lt;/p&gt;

&lt;p&gt;其实，第一行代码只不过是定义了一个函数头，第2行代码才是精华。这里面利用了动态语言常见的 eval 手法（具体参见“这里”）。在 python 里面，内置的 eval 函数可以把某个字符串当成一个表达式，并对其求值。而语句 “%d %s %d” % (n1, op, n2) 只不过格式化出一个表达式的字符串。&lt;/p&gt;

&lt;p&gt;顺便再插一句，Python 还有一个 exec 的内置函数，可以把一段 Python 源代码作为字符串参数传递给它，让该函数去执行。两个函数结合起来，就能玩出很多花样。具体的花样可以参见“这篇博文”。&lt;/p&gt;

&lt;h1 id=&quot;为什么是-python&quot;&gt;为什么是 Python？&lt;a name=&quot;whyPython&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;说了动态语言的种种好话，有同学会问了，动态语言有很多种，为啥非要学习 Python 捏？&lt;/p&gt;

&lt;p&gt;首先，俺在本系列的第1篇帖子，已经对比过 Python 和另外几种脚本语言。那几种“脚本语言”碰巧也是知名的“动态语言”。Python 相对于他们的优势，此处就不再重复啰嗦了。&lt;/p&gt;

&lt;p&gt;其次，单就语法本身而言，Python 的语法对动态性的支持是很优雅、很简洁滴。通过刚才那个 eval 小例子，大伙应该已经看出来了。为了更形象一点，咱拿前面提到的 Mixin 来 Show 一下 Python 的语法是如何的简洁。&lt;/p&gt;

&lt;p&gt;通俗地说，Mixin 手法需要在【运行时】给某个类增加基类（也就是父类）。对于 Python 而言，每一个类都有一个内置属性 &lt;strong&gt;bases&lt;/strong&gt;，里面包含这个类【当前】的所有基类。假如要在【运行时】增加基类，只需操作 &lt;strong&gt;bases&lt;/strong&gt; 这个属性即可。&lt;/p&gt;

&lt;p&gt;比如有一个类 A 和类 B。如果要在运行时把 B 加为 A 的父类，可以用如下语句：
A.&lt;strong&gt;bases&lt;/strong&gt; += (B,)&lt;/p&gt;

&lt;p&gt;是不是也很简洁，而且可读性也不差？相比而言，有些动态语言（比如 JavaScript），要实现类似的效果，代码就相对复杂了。&lt;/p&gt;

&lt;p&gt;由于 Mixin 不是今天的重点，就不再深入展开了。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;最后，来个总结发言：如果你之前没有接触过动态语言，建议去学习一下；如果你已经打定主意要学，Python 是比较好的候选者。&lt;/p&gt;

&lt;p&gt;好了，今天就聊到这里。下一个帖子，咱们来讲讲 Python 作为一个纯粹的面向对象语言，有些啥特色。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-0-overview&quot;&gt;回到本系列的目录&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt;&lt;br /&gt;
本博客&lt;label for=&quot;reference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;reference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;指编程随想的博客 &lt;/span&gt;所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址：&lt;br /&gt;
&lt;a href=&quot;https://program-think.blogspot.com/2009/08/why-choose-python-2-dynamic.html&quot;&gt; https://program-think.blogspot.com/2009/08/why-choose-python-2-dynamic.html &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-why-choose-python-2-dynamic</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-why-choose-python-2-dynamic</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：为什么俺推荐 Python[1]·作为脚本语言的 Python</title>
        <description>&lt;h3 id=&quot;文章目录&quot;&gt;文章目录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#pros&quot;&gt;脚本语言好在哪？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cons&quot;&gt;脚本语言有啥缺点？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compare&quot;&gt;Python 和其它脚本语言的比较&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;俺窃以为，Python 的所有特征中，作为脚本语言（“脚本语言”的定义参见“&lt;a href=&quot;https://en.wikipedia.org/wiki/Scripting_language&quot;&gt;这里&lt;/a&gt;”）是它的首要特征。因此，在本系列帖子中，俺首先来忽悠一下 Python 作为脚本语言，有些啥好处？&lt;/p&gt;

&lt;h1 id=&quot;脚本语言好在哪&quot;&gt;脚本语言好在哪？&lt;a name=&quot;pros&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;要聊 Python 作为脚本语言的好处，首先得说说脚本语言自身有哪些优点。一般来说，当我们提及“脚本语言”，都是强调其解释执行的特性（虽然有些脚本语言也支持编译）。所以，后面陈述的这些优点，大都是拿编译型语言来进行对比。&lt;/p&gt;

&lt;h2 id=&quot;更高层次的抽象和封装&quot;&gt;更高层次的抽象和封装&lt;/h2&gt;

&lt;p&gt;大部分脚本语言都提供了（内置了）比较高层次的抽象和封装。像很多脚本语言都内置了字符串处理能力以及正则表达式（典型代表就是 Perl）。还有很多脚本语言都内置了高级的数据结构。比如 Python 在语言层面支持了链表（Python 的术语叫 List）、映射（Python 的术语叫 Dict）、元组（Python 的术语叫 Tuple）。&lt;/p&gt;

&lt;p&gt;有了这些高层次的封装，你写起代码来，就特别滴简单、特别滴爽。比如，在 Python 中要把一个 List 翻倍，只需这么写：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就得到&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;更少的代码量&quot;&gt;更少的代码量&lt;/h2&gt;

&lt;p&gt;得益于高层次的封装，在完成相同功能的前提下，脚本语言的代码量会比编译型语言少很多。&lt;/p&gt;

&lt;p&gt;比如说，要打印出某个文本文件的内容，如果用 Java 实现，正常的写法大概要七、八行代码（把所有代码硬挤到一行的，不予讨论）；用 Python 也就三、五行。&lt;/p&gt;

&lt;p&gt;再比如说，抓取某个网址对应的 web 网页，用 Python 自带的标准库实现，大概3到5行代码；但如果用 C++ 实现，代码量会增加许多（具体要写多少代码，取决于你用了哪个 http 的库）。&lt;/p&gt;

&lt;p&gt;代码量少了之后，至少你看代码的时候（无论是看自个儿滴还是看别人滴），能少敲很多次翻页键，大大延长了键盘的寿命，顺便降低了手指头的劳损。&lt;/p&gt;

&lt;h2 id=&quot;更好的可读性&quot;&gt;更好的可读性&lt;/h2&gt;

&lt;p&gt;当然啦，延长键盘寿命还不是关键，关键在于——代码量少了之后，（通常情况下）会有助于提高可读性。而可读性恰恰是 Python 的强项之一。&lt;/p&gt;

&lt;p&gt;比方说：Python 在【语法层面】强制约定了作用域缩进（这是俺很喜欢 Python 的地方之一）。如此一来，即便是新手程序猿写出的 Python 代码，缩进风格也很统一。反观 C/C++/Java 的新手，写出的代码就没有这么整齐了。&lt;/p&gt;

&lt;h2 id=&quot;更平缓的学习曲线&quot;&gt;更平缓的学习曲线&lt;/h2&gt;

&lt;p&gt;通常，脚本语言的语法都比较简单、傻瓜化。因此，入门也就容易很多。稍微有一些编程基础的人，就能够在短时间内上手。&lt;/p&gt;

&lt;p&gt;比如俺手下的 C++、Java 程序员，以及某些测试人员，都可以在一周内（程序员用不着一周，一般就1、2天）掌握 Python 的语法并用来写一些辅助的小工具。大大节约了俺培训的口水。&lt;/p&gt;

&lt;h2 id=&quot;支持交互式&quot;&gt;支持“交互式”&lt;/h2&gt;

&lt;p&gt;很多脚本语言的 IDE 支持【交互式写代码】。也就是说，你每写完一行代码，解释器就执行一把。这样能很快发现输入错误，而且还可以立即看到执行结果。&lt;/p&gt;

&lt;h1 id=&quot;脚本语言有啥缺点&quot;&gt;脚本语言有啥缺点？&lt;a name=&quot;cons&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;前面说了那么多优点，那脚本语言有啥缺点捏？&lt;/p&gt;

&lt;p&gt;主要的缺点就是【性能差】。这是他们为上述优点所付出的沉重代价。所幸当今的计算机硬件突飞猛进，性能差的缺点已经越来越不明显了。&lt;/p&gt;

&lt;h1 id=&quot;python-和其它脚本语言的比较&quot;&gt;Python 和其它脚本语言的比较&lt;a name=&quot;compare&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;有同学可能要问了，脚本语言有很多，为啥俺独独青睐 Python 捏？&lt;/p&gt;

&lt;p&gt;为了回答这个问题，下面俺拿 Python 和一些常见的脚本语言作一些【肤浅的】比较。&lt;/p&gt;

&lt;p&gt;鉴于后面的内容极易引发语言的口水战，俺特此声明：虽然接下来会提及某些语言相对于 python 的缺点，但俺绝无贬低这些语言的企图，也无意证明 python 比这些语言优秀！俺只是陈述一下：当年是如何在几种脚本语言中进行取舍的？&lt;/p&gt;

&lt;p&gt;除了 Python 之外，常见的脚本语言还有很多，比如：PHP、JavaScript（以下简称 JS）、Perl、VBScript（以下简称 VBS）、Ruby、Bash、Lua、Tcl（可别误以为是某家电厂商）……Python 是如何从这些脚本语言中脱颖而出的捏？俺挑选的时候，主要考虑了如下几点：&lt;/p&gt;

&lt;h2 id=&quot;通用性跨领域&quot;&gt;通用性（跨领域）&lt;/h2&gt;

&lt;p&gt;因为俺懒得学太多编程语言。所以，俺希望熟悉一门脚本语言之后，能够尽量多帮俺搞定不同领域的事儿。从这点来看，俺就不会选择 PHP（太偏重于 Web 服务端）、JS（太偏重于 Web 客户端）、诸如 Bash 之类的 Shell 脚本（太偏重于系统管理）。&lt;/p&gt;

&lt;p&gt;而 Python 则属于通用的脚本语言，覆盖范围很广。比如 Web 开发、桌面 GUI 应用、系统管理、网络应用、科学计算等许多领域，Python 都可以轻易搞定。&lt;/p&gt;

&lt;h2 id=&quot;人气够旺&quot;&gt;人气够旺&lt;/h2&gt;

&lt;p&gt;关于“人气”的重要性，俺在《如何选择开源项目》一文中，有介绍过。人气越高、越流行，就意味着更多的资源（包括文档、相关软件），当你碰到问题需要解决，也有更多的人可以咨询。&lt;/p&gt;

&lt;p&gt;关于编程语言的流行程度，可以大致参考 TIOBE 的排名（虽然 TIOBE 不能全面反映流行程度，但至少可作为某种参考）。&lt;/p&gt;

&lt;p&gt;像 Tcl、PowerShell、Groovy、JavaFX 等都排在３０名之外（截至写本文的2009年8月），感觉用的人太少了，俺暂时不予考虑。而 Python 最近几年的排名则一路上升（请看“这里”），截止到2009年8月，已经高踞排行榜第６位。Perl 虽然也身居高位，但是最近几年的排名一路下滑（请看“&lt;a href=&quot;http://www.tiobe.com/content/paperinfo/tpci/Perl.html&quot;&gt;这里&lt;/a&gt;”）。俺个人认为，其人气不容乐观。&lt;/p&gt;

&lt;h2 id=&quot;功能够强库够丰富&quot;&gt;功能够强、库够丰富&lt;/h2&gt;

&lt;p&gt;另一个俺很看重的地方是功能是否够强大。在这点上，Python 和 Perl 都算是比较强悍的。关于 Python 如何强悍，俺会在本系列的第5篇帖子《作为瑞士军刀的 Python》中加以介绍。&lt;/p&gt;

&lt;p&gt;反观 JS、Ruby、Tcl 等语言，则稍显不足（当然，也有可能俺孤陋寡闻）。&lt;/p&gt;

&lt;h2 id=&quot;跨平台&quot;&gt;跨平台&lt;/h2&gt;

&lt;p&gt;由于俺平时会使用不同的操作系统，再加上俺负责的产品也是跨平台的。所以，俺对脚本语言有跨平台的要求。说到跨平台，诸如VBS、Bash之流就不予考虑了。&lt;/p&gt;

&lt;p&gt;其实，很多脚本语言都支持跨平台。而 Python 在这方面，更为出众。不光支持主流的操作系统，还支持一些冷门的（比如古老的 DOS），还支持手持设备（比如智能手机和平板）。&lt;/p&gt;

&lt;h2 id=&quot;和其它语言的整合交互&quot;&gt;和其它语言的整合、交互&lt;/h2&gt;

&lt;p&gt;最后这一点，估计大多数同学不会太关心。俺因为要在公司的产品中引入脚本技术，所以俺还得考虑该脚本语言和其它语言的整合能力。整合能力强的脚本语言，可以作为复杂系统中的胶水，用来把不同模块粘合在一起（关于 Glue Language，可以参见“&lt;a href=&quot;https://en.wikipedia.org/wiki/Glue_language&quot;&gt;这里&lt;/a&gt;”）。&lt;/p&gt;

&lt;p&gt;在这方面，Python 和 Ruby 的表现都不错：&lt;/p&gt;

&lt;p&gt;它们和 Java 的整合有Jython、JRuby；&lt;/p&gt;

&lt;p&gt;和 dotNet 平台的整合有IronPython、IronRuby。&lt;/p&gt;

&lt;p&gt;至于俺常用的 C++，Python 整合得比 Ruby 好。比如 C++ 社区大名鼎鼎的 Boost 库里面，就内置了一个 Boost.Python 的子库（参见“这里”）。&lt;/p&gt;

&lt;p&gt;关于 Python 如何用作胶水，俺会在后续的帖子“作为胶合语言的 Python”中会详细介绍。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;基于上述几个方面的考虑，俺最终选择了 Python 作为日常使用的脚本工具，并把它引入到公司的产品中，作为模块之间的胶合剂。&lt;/p&gt;

&lt;p&gt;啰嗦完Python作为脚本语言的方方面面，下一个帖子，咱来聊一下它作为动态语言的那些事儿。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-0-overview&quot;&gt;回到本系列的目录&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;版权声明&lt;/em&gt;&lt;br /&gt;
本博客&lt;label for=&quot;reference&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;reference&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;指编程随想的博客 &lt;/span&gt;所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址：&lt;br /&gt;
&lt;a href=&quot;https://program-think.blogspot.com/2009/08/why-choose-python-1-script.html&quot;&gt;https://program-think.blogspot.com/2009/08/why-choose-python-1-script.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-why-choose-python-1-script</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-why-choose-python-1-script</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>转载：为什么俺推荐 Python[0]·概述</title>
        <description>&lt;p&gt;当初博客开张的时候，原计划在编程语言方面聊聊 C++、Java 和 Python。谁曾想半年多过去了，尚未写过 Python 的帖子。实在是说不过去啊！所以今天赶紧写一篇来凑数。&lt;/p&gt;

&lt;p&gt;其实俺接触 Python 的时间，也不算太早（大概是2003年那会儿）。当时看到 Eric Raymond 关于几大编程语言的评价（原文在“这里”，翻译在“这里”），之后又看了他写的《Why Python?》。感觉这位大牛蛮器重 Python 滴，于是俺也就跟风学习了一番。从此一发不可收拾——现在 Python 已然成为俺最常使用的脚本语言了。&lt;/p&gt;

&lt;p&gt;接下来，俺就从几个不同的角度来鼓吹一下 Python。假如你从来没有听说过或者从来没用过此语言，听了俺的忽悠之后，或许会有所心动 :-) 假如你觉得俺只不过是 Python 阵营的枪手，发发广告帖，那你就不用再浪费宝贵的时间去看后续的帖子了。&lt;/p&gt;

&lt;p&gt;按照俺先前的习惯，会把接下来的内容拆成几个帖子来写……&lt;/p&gt;

&lt;p&gt;为了方便阅读，把本系列帖子的目录整理如下（需翻墙）：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-1-script&quot;&gt;作为脚本语言的 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-2-dynamic&quot;&gt;作为动态语言的 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-3-oop&quot;&gt;作为面向对象语言的 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-4-fp&quot;&gt;作为函数式编程语言的 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/articles/RP-why-choose-python-5-tool&quot;&gt;作为瑞士军刀的 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;（未完待续）&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;本博客&lt;label for=&quot;blog&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;blog&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;指编程随想的博客 &lt;/span&gt;所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址：&lt;br /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://program-think.blogspot.com/2009/08/why-choose-python-0-overview.html&quot;&gt;https://program-think.blogspot.com/2009/08/why-choose-python-0-overview.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/blog/articles/RP-why-choose-python-0-overview</link>
        <guid isPermaLink="true">http://localhost:4000/blog/articles/RP-why-choose-python-0-overview</guid>
        
        
        <category>post</category>
        
      </item>
    
  </channel>
</rss>
